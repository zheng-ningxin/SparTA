[{"tvm_func_name": "tuned_depthwise_convolution_op_float_i128_128_56_56_w128_1_3_3_o128_128_56_56_ws1_1_wd1_1_p1_1_kernel0", "op_type": "QuantizeConvolution", "parameters": {"input_shape": [8, 112, 14, 14], "filter_shape": [208, 112, 1, 1], "output_shape": [8, 208, 14, 14], "window_movement_strides": [1, 1], "window_dilation_strides": [1, 1], "padding_below_diff": [0, 0], "identifier_suffix": "BatchNormInferenceRelu", "identifier_prefix": "Quantize", "in_quantize_bit": 8, "out_quantize_bit": 8}, "code": "extern \"C\" __global__ void MatrixMulCUDA_8bit_bias(float *input0, float *input1, float *input2, float *input3, float *input4, float *input5, float * input6,float  *input7, float *output0) \n{\n    const unsigned int M_GLOBAL=1568;\n    const unsigned int K_GLOBAL=112;\n    const unsigned int N_GLOBAL=208;\n    // const parameters\n    const unsigned int  WARP_SIZE=32;\n    const unsigned int  M=16;\n    const unsigned int  N=16;\n    const unsigned int  K=16;\n    const unsigned int  WMMA_M=16;\n    const unsigned int  WMMA_N=16;\n    const unsigned int  WMMA_K=16;\n\n    const unsigned int  M_TILES=(M_GLOBAL/M);\n    const unsigned int  K_TILES=(K_GLOBAL/K);\n    const unsigned int  N_TILES=(N_GLOBAL/N);\n\n\n\n    // typedef C_LAYOUT wmma::mem_row_major;\n\n    const unsigned int CHUNK_K=1;\n    const unsigned int BLOCK_ROW_WARPS=1;\n    const unsigned int BLOCK_COL_WARPS=2;\n\n    const unsigned int WARP_ROW_TILES =2;\n    const unsigned int WARP_COL_TILES =1;\n\n    const unsigned int WARPS_PER_BLOCK=(BLOCK_ROW_WARPS * WARP_COL_TILES);\n    const unsigned int THREADS_PER_BLOCK= (WARP_SIZE * WARPS_PER_BLOCK);\n    const unsigned int CHUNK_LINE_BYTES=(CHUNK_K * K * sizeof(uint8_t));\n    const unsigned int WARP_COPY_BYTES=(WARP_SIZE * sizeof(int4));\n    const unsigned int CHUNK_COPY_LINES_PER_WARP=(WARP_COPY_BYTES / CHUNK_LINE_BYTES);\n    const unsigned int CHUNK_COPY_LINE_LANES=(WARP_SIZE / CHUNK_COPY_LINES_PER_WARP);\n\n    const unsigned int LANE_ROW_STRIDE = (WARP_ROW_TILES * N / 8);\n    const unsigned int LANE_COL_STRIDE = (WARP_COL_TILES * M / 4);\n    const unsigned int WARP_STRIDE = (WARP_ROW_TILES * N);\n\n    const unsigned int BLOCK_ROW_TILES =(WARP_ROW_TILES * BLOCK_ROW_WARPS);\n    const unsigned int BLOCK_COL_TILES =(WARP_COL_TILES * BLOCK_COL_WARPS);\n\n    const unsigned int GLOBAL_MEM_STRIDE =N_GLOBAL;\n\n    const unsigned int SHMEM_STRIDE=(N * BLOCK_ROW_TILES);\n    const unsigned int SHMEM_OFFSET=(N * WARP_ROW_TILES);\n\n    const unsigned int SKEW_UINT8=32;\n\n\n    // Convert the input pointers\n    const uint8_t * A = reinterpret_cast<uint8_t*>(input0); // activation\n    const uint8_t * B =  reinterpret_cast<uint8_t*>(input1); // weight\n    const int * C = reinterpret_cast< int *>(input7);\n    uint8_t * D = reinterpret_cast<uint8_t*>(output0);\n    const int alpha = (int)(*input5);\n    const int integer = (int)(*input6);\n\n\n  const int shared_size = MAX(sizeof(uint8_t) * (BLOCK_COL_TILES * M + BLOCK_ROW_TILES * N) *\n                       (CHUNK_K * K + SKEW_UINT8),\n                   M * (BLOCK_ROW_WARPS * WARP_ROW_TILES) * N *\n                       (BLOCK_COL_WARPS * WARP_COL_TILES) * sizeof(int));\n  __shared__ uint8_t shmem[shared_size/(CHUNK_K * K + SKEW_UINT8)+1][CHUNK_K * K + SKEW_UINT8];\n\n  // Warp and lane identification.\n  const unsigned int warpId = threadIdx.x / WARP_SIZE;\n  const unsigned int laneId = threadIdx.x % WARP_SIZE;\n\n  // Offset in shared memory from which the B matrix is stored.\n  const size_t shmem_idx_b_off = BLOCK_COL_TILES * M;       // BLOCK_COL_TILES is shared_A row numbers in one block\n\n  // This pointer is used to access the C and D matrix tiles this warp computes.\n  int *shmem_warp_tile_ptr = (int *)&shmem[0][0] +\n                             (warpId / BLOCK_ROW_WARPS) * SHMEM_STRIDE * M * WARP_COL_TILES +    // original K * 2 is because one warp calculate k * 2 rows.\n                             (warpId % BLOCK_ROW_WARPS) * SHMEM_OFFSET;\n\n\n  // Each CTA slides along the 128 x 128 tiles from the top left corner of the\n  // matrix to the right and down, and selects the next tile to compute. Once\n  // there's no such tile, all warps in this CTA exit.\n    unsigned int block_pos = blockIdx.x;\n    const unsigned int block_tile_i =                                   // get the i (row) index of all tiles\n        ((block_pos * BLOCK_ROW_TILES) / N_TILES) * (BLOCK_COL_TILES);\n    const unsigned int block_tile_j = (block_pos * BLOCK_ROW_TILES) % N_TILES;\n\n    // Stop when there are no more D matrix tiles to compute in this CTA.\n\n\n    // This warp's pointer to the C matrix data to copy memory from to shared\n    // memory.\n\n    // Stream multiple C tiles to shared memory.\n\n    __syncthreads();\n\n    // These fragments will accumulate the result of A and B matrix fragment\n    // multiplications along the K_GLOBAL dimension.\n    wmma::fragment<wmma::accumulator, M, N, K, int> c[WARP_COL_TILES]\n                                                     [WARP_ROW_TILES];\n\n#pragma unroll\n    for (int i = 0; i < WARP_COL_TILES; i++) {\n#pragma unroll\n      for (int j = 0; j < WARP_ROW_TILES; j++) {\n#pragma unroll\n        // Uniform, point-wise transformations of ALL fragment elements by ALL\n        // threads in the warp are well-defined even though element indices\n        // within fragment storage are not defined.\n        for (int t = 0; t < c[i][j].num_elements; t++) {\n          c[i][j].x[t] = 0;\n        }\n      }\n    }\n\n    __syncthreads();\n\n    // Select what warp copies what matrix to shared memory.\n    // Warps 0-3 copy the A matrix, warps 4-7 copy the B matrix.\n\n    // need to modify, per warp correspond to block of matrix A and B\n    // especially need to change the value 2\n\n    // threads number of loading per row to shared memory\n    const unsigned int THREADS_PER_ROW = (CHUNK_K * K * sizeof(uint8_t)) / (sizeof(int));\n\n    // number of lines loading data to shared memory per cycle.\n    const unsigned int TILE_LINE_STRIDE = THREADS_PER_BLOCK / THREADS_PER_ROW;\n\n    const uint8_t *warp_ptr = (warpId < (WARPS_PER_BLOCK / 2)) ? (&A[block_tile_i * M * K_GLOBAL] +\n                                              M * K_GLOBAL * (warpId % (WARPS_PER_BLOCK / 2)) * (BLOCK_COL_TILES / (WARPS_PER_BLOCK / 2)))\n                                           : (&B[block_tile_j * N * K_GLOBAL] +\n                                              N * K_GLOBAL * (warpId % (WARPS_PER_BLOCK / 2)) * (BLOCK_ROW_TILES / (WARPS_PER_BLOCK / 2)));\n\n    // Go through the global K dimension by a fixed step at a time.\n#pragma unroll\n    for (int tile_k = 0; tile_k < K_TILES; tile_k += CHUNK_K) {\n      size_t shmem_idx =\n          warpId < (WARPS_PER_BLOCK / 2)\n              ? (M * (warpId % (WARPS_PER_BLOCK / 2)) * (BLOCK_COL_TILES / (WARPS_PER_BLOCK / 2)))\n              : (N * (warpId % (WARPS_PER_BLOCK / 2)) * (BLOCK_ROW_TILES / (WARPS_PER_BLOCK / 2)) + shmem_idx_b_off);\n\n      // First half of the warp copies the first row / column of the matrix,\n      // the second half of the warp copies the next.\n      int4 *lane_ptr = (int4 *)(warp_ptr + tile_k * K +\n                                (laneId / CHUNK_COPY_LINE_LANES) * K_GLOBAL) +\n                       (laneId % CHUNK_COPY_LINE_LANES);\n\n      // Shift the second half of the warp to the next row / column in the\n      // shared memory.\n      shmem_idx += laneId / CHUNK_COPY_LINE_LANES;\n\n      int iter_index = warpId < (WARPS_PER_BLOCK / 2) \n        ? (BLOCK_COL_TILES / (WARPS_PER_BLOCK / 2)) * M / CHUNK_COPY_LINES_PER_WARP \n        : (BLOCK_ROW_TILES / (WARPS_PER_BLOCK / 2)) * N / CHUNK_COPY_LINES_PER_WARP;\n#pragma unroll\n      //for (int i = 0; i < ((WARP_SIZE / 2) / CHUNK_COPY_LINES_PER_WARP) * 2;\n      for (int i = 0; i < iter_index;\n           i++) {\n        // Copy 16 bytes at once in each lane.\n        *((int4 *)&shmem[shmem_idx][0] + (laneId % CHUNK_COPY_LINE_LANES)) =\n            *lane_ptr;\n\n        // Advance the global memory pointer and the shared memory index.\n        lane_ptr = (int4 *)((uint8_t *)lane_ptr +\n                            K_GLOBAL * CHUNK_COPY_LINES_PER_WARP);\n        shmem_idx += CHUNK_COPY_LINES_PER_WARP;\n      }\n\n      __syncthreads();\n\n      /*\n    #pragma unroll\n      // load matrix A from global memory to shared memory.\n      for(int i = 0; i < BLOCK_COL_TILES * M; i += TILE_LINE_STRIDE){\n        *((int*)&shmem[i + threadIdx.x / THREADS_PER_ROW][0] + (threadIdx.x % THREADS_PER_ROW)) = \n          *((int*)&A[block_tile_i * M * K_GLOBAL + tile_k * K + (i + threadIdx.x) / THREADS_PER_ROW * K_GLOBAL] + (threadIdx.x % THREADS_PER_ROW));\n      }\n    \n    #pragma unroll\n      for(int i = 0; i < BLOCK_ROW_TILES * N; i += TILE_LINE_STRIDE){\n        *((int*)&shmem[shmem_idx_b_off + i + threadIdx.x / THREADS_PER_ROW][0] + (threadIdx.x % THREADS_PER_ROW)) = \n          *((int*)&B[block_tile_j * N * K_GLOBAL + tile_k * K + (i + threadIdx.x) / THREADS_PER_ROW * K_GLOBAL] + (threadIdx.x % THREADS_PER_ROW));\n      }\n\n      __syncthreads();\n      */\n\n      // Compute a grid of C matrix tiles in each warp.\n#pragma unroll\n      for (int k_step = 0; k_step < CHUNK_K; k_step++) {\n        wmma::fragment<wmma::matrix_a, M, N, K, uint8_t, wmma::row_major>\n            a[WARP_COL_TILES];\n        wmma::fragment<wmma::matrix_b, M, N, K, uint8_t, wmma::col_major>\n            b[WARP_ROW_TILES];\n\n#pragma unroll\n        for (int i = 0; i < WARP_COL_TILES; i++) {\n          size_t shmem_idx_a = (warpId / BLOCK_ROW_WARPS) * M * WARP_COL_TILES + (i * M);\n          const uint8_t *tile_ptr = &shmem[shmem_idx_a][k_step * K];\n\n          wmma::load_matrix_sync(a[i], tile_ptr, K * CHUNK_K + SKEW_UINT8);\n\n#pragma unroll\n          for (int j = 0; j < WARP_ROW_TILES; j++) {\n            if (i == 0) {\n              // Load the B matrix fragment once, because it is going to be\n              // reused against the other A matrix fragments.\n              size_t shmem_idx_b = shmem_idx_b_off +\n                                   (WARP_ROW_TILES * N) * (warpId % BLOCK_ROW_WARPS) +\n                                   (j * N);\n              const uint8_t *tile_ptr = &shmem[shmem_idx_b][k_step * K];\n\n              wmma::load_matrix_sync(b[j], tile_ptr, K * CHUNK_K + SKEW_UINT8);\n            }\n\n            wmma::mma_sync(c[i][j], a[i], b[j], c[i][j]);\n          }\n        }\n      }\n\n      __syncthreads();\n    }\n\n      // Store the D fragments to shared memory.\n#pragma unroll\n    for (int i = 0; i < WARP_COL_TILES; i++) {\n#pragma unroll\n      for (int j = 0; j < WARP_ROW_TILES; j++) {\n#pragma unroll\n        // Uniform, point-wise transformations of ALL fragment elements by ALL\n        // threads in the warp are well-defined even though element indices\n        // within fragment storage are not defined.\n        for (int t = 0; t < c[i][j].num_elements; t++) {\n          c[i][j].x[t] = ((c[i][j].x[t] * alpha) >> integer);\n        }\n\n        int *tile_ptr = shmem_warp_tile_ptr + i * SHMEM_STRIDE * K + j * N;\n\n        wmma::store_matrix_sync(tile_ptr, c[i][j], SHMEM_STRIDE, wmma::mem_row_major);\n      }\n    }\n\n    __syncthreads();\n\n    // Now that shared memory contains all the D tiles, stream them to global\n    // memory.\n    // This pointer is used to stream the C and D matrices block-wide tile to and\n    // from shared memory.\n\n    // ( (warpId / BLOCK_ROW_WARPS) * WARP_COL_TILES * M, (warpId % BLOCK_ROW_WARPS) * WARP_ROW_TILES * N )\n    int *shmem_warp_stream_ptr = (int *)&shmem[0][0] + (warpId / BLOCK_ROW_WARPS) * WARP_COL_TILES * M * SHMEM_STRIDE\n                                    + (warpId % BLOCK_ROW_WARPS) * WARP_ROW_TILES * N; \n    const size_t gmem_idx =\n        (block_tile_i * M + (warpId / BLOCK_ROW_WARPS) * WARP_COL_TILES * M) * GLOBAL_MEM_STRIDE +\n        block_tile_j * N + (warpId % BLOCK_ROW_WARPS) * WARP_ROW_TILES * N;\n    uint8_t *dst_gmem_warp_stream_ptr = &D[gmem_idx];\n\n    int *shmem_lane_stream_ptr = \n        shmem_warp_stream_ptr + \n        laneId * LANE_ROW_STRIDE / WARP_STRIDE * LANE_COL_STRIDE * SHMEM_STRIDE +\n        laneId * LANE_ROW_STRIDE % WARP_STRIDE;\n    uint8_t *dst_gmem_lane_stream_ptr = \n        dst_gmem_warp_stream_ptr + \n        laneId * LANE_ROW_STRIDE / WARP_STRIDE * LANE_COL_STRIDE * GLOBAL_MEM_STRIDE +\n        laneId * LANE_ROW_STRIDE % WARP_STRIDE;\n\n#pragma unroll\n    for (int i = 0; i < LANE_COL_STRIDE; i++){\n      for(int k = 0; k < LANE_ROW_STRIDE; k++){\n        *(dst_gmem_lane_stream_ptr + GLOBAL_MEM_STRIDE * i + k) =\n          (uint8_t)*((int *)(shmem_lane_stream_ptr + SHMEM_STRIDE * i + k));\n      }\n    }\n\n    \n    /*\n    int *shmem_warp_stream_ptr = (int *)&shmem[0][0] + warpId * SHMEM_STRIDE * K;   // confuse, may be used to read from global memory?\n    const size_t gmem_idx =\n        (block_tile_i + warpId) * M * GLOBAL_MEM_STRIDE + block_tile_j * N;\n    uint8_t *dst_gmem_warp_stream_ptr = &D[gmem_idx];\n\n#pragma unroll\n    for (int i = 0; i < K; i++) {\n      for(int k = 0; k < 4; k++){\n        *(dst_gmem_warp_stream_ptr + GLOBAL_MEM_STRIDE * i + laneId * 4 + k) =\n          (uint8_t)*((int *)(shmem_warp_stream_ptr + SHMEM_STRIDE * i + laneId * 4 + k));\n      }\n    }\n    */\n    \n    __syncthreads();\n}\n", "gridDim": [319, 1, 1], "blockDim": [64, 1, 1], "dynamic_shared_memory": 0}]