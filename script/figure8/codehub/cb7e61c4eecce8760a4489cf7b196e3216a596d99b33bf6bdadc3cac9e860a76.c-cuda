// GLOBALS: input0:float32[64, 49, 64] -> output0:float32[32, 49, 128]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 2, 2, 1], "Foutput0:D1": [-1, 7, 1, 1], "Foutput0:D2": [-1, 8, 16, 1], "Foutput0:O": [2, 0, 1], "Foutput0:S": 4, "Foutput0:R": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[N0, N1, N2] ;   mediate1[N0, N1, N2, N3] = mediate0[((N0) * 2 + N1), N2, N3] where N0 in 32, N1 in 2;   mediate2[N0, N2, N1, N3] = mediate1[N0, N1, N2, N3] ;  output0[N0, N1, N2] = mediate2[N0, N1, N2 / 64 % 2, N2 / 1 % 64] where N2 in 128;  ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [64, 49, 64]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[64, 49, 64] -> output0:float32[32, 49, 128]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(32) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8
  // [thread_extent] threadIdx.x = 2
  // [thread_extent] blockIdx.y = 7
  // [thread_extent] threadIdx.y = 1
  // [thread_extent] blockIdx.z = 1
  // [thread_extent] threadIdx.z = 16
  output0[(((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)))] = input0[(((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 16))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 16))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 32))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 32))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 48))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 48))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 64))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3136))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 80))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 96))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 112))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12544))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12544))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12560))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12560))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12576))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12576))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12592))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12592))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12608))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 15680))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12624))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12544))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12640))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12544))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12656))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12544))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 128))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 64))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 144))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 80))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 160))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 96))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 176))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 112))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 192))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3200))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 208))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 64))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 224))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 64))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 240))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 64))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12672))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12608))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12688))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12624))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12704))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12640))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12720))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12656))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12736))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 15744))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12752))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12608))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12768))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12608))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12784))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12608))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 256))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 128))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 272))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 144))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 288))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 160))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 304))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 176))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 320))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3264))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 336))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 128))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 352))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 128))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 368))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 128))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12800))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12672))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12816))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12688))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12832))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12704))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12848))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12720))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12864))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 15808))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12880))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12672))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12896))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12672))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12912))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12672))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 384))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 192))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 400))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 208))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 416))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 224))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 432))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 240))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 448))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3328))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 464))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 192))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 480))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 192))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 496))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 192))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12928))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12736))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12944))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12752))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12960))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12768))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12976))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12784))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 12992))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 15872))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13008))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12736))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13024))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12736))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13040))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12736))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 512))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 256))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 528))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 272))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 544))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 288))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 560))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 304))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 576))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3392))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 592))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 256))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 608))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 256))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 624))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 256))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13056))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12800))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13072))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12816))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13088))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12832))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13104))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12848))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13120))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 15936))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13136))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12800))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13152))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12800))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13168))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12800))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 640))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 320))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 656))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 336))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 672))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 352))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 688))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 368))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 704))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3456))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 720))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 320))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 736))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 320))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 752))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 320))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13184))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12864))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13200))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12880))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13216))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12896))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13232))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12912))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13248))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 16000))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13264))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12864))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13280))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12864))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13296))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12864))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 768))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 384))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 784))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 400))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 800))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 416))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 816))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 432))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 832))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 3520))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 848))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 384))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 864))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 384))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 880))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 384))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13312))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12928))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13328))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12944))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13344))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12960))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13360))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 12976))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13376))] = input0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 448)) + ((int)threadIdx.z)) + 16064))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13392))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 80) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 16)) + 12928))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13408))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 96) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 32)) + 12928))];
  output0[((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((int)blockIdx.y) * 896)) + ((int)threadIdx.z)) + 13424))] = input0[(((((((((int)blockIdx.x) * 25088) + (((int)threadIdx.x) * 6272)) + (((((int)threadIdx.z) + 112) / 64) * 3136)) + (((int)blockIdx.y) * 448)) + (((int)threadIdx.z) + 48)) + 12928))];
}

// Saved Perf = 3.091600e-06 sec / run; Step Produced = 122; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.