// GLOBALS: input0:float32[32], input1:float32[32, 32, 56, 56], input2:float32[48, 32, 1, 1] -> output0:float32[32, 48, 56, 56]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 4, 6], "Toutput0:D2": [-1, 2, 1, 1], "Toutput0:D3": [-1, 1, 56, 1], "Toutput0:R0": [-1, 8, 1], "Toutput0:RA": 0, "Toutput0:S": 3, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2, N3] = input0[N1] where N0 in 32, N2 in 56, N3 in 56;   mediate1[N0, N1, N2, N3] = input1[N0, N1, N2, N3] + mediate0[N0, N1, N2, N3]; mediate2[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate1[N0, N1, N2, N3].dtype())]); output0[N, F, HO, WO] +=! mediate2[N, C, -0 + KH + HO * 1, -0 + KW + WO * 1] * input2[F, C, KH, KW] where HO in 56, WO in 56; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [32]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 32, 56, 56]} ,  "input2" : { "dtype" : "float32", "shape" : [48, 32, 1, 1]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[32], input1:float32[32, 32, 56, 56], input2:float32[48, 32, 1, 1] -> output0:float32[32, 48, 56, 56]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(224) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 1792
  // [thread_extent] threadIdx.x = 224
  float output0_local[12];
  #pragma unroll
  for (int F_c_inner_init = 0; F_c_inner_init < 6; ++F_c_inner_init) {
    output0_local[(F_c_inner_init)] = 0.000000e+00f;
    output0_local[((F_c_inner_init + 6))] = 0.000000e+00f;
  }
  #pragma unroll
  for (int C_outer_outer = 0; C_outer_outer < 4; ++C_outer_outer) {
    __shared__ float mediate2_shared[896];
    __syncthreads();
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 224
      mediate2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + ((int)threadIdx.x)))] = max((input1[((((((((((int)blockIdx.x) / 56) * 100352) + (C_outer_outer * 25088)) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 6272)) + ((((int)threadIdx.x) / 112) * 3136)) + ((((int)blockIdx.x) % 28) * 112)) + (((int)threadIdx.x) % 112)))] + input0[((((C_outer_outer * 8) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2)) + (((int)threadIdx.x) / 112)))]), 0.000000e+00f);
    }
    __shared__ float input2_shared[192];
  // [thread_extent] threadIdx.x = 224
    if (((int)threadIdx.x) < 192) {
      input2_shared[(((int)threadIdx.x))] = input2[(((((((((int)blockIdx.x) % 56) / 28) * 768) + ((((int)threadIdx.x) >> 3) * 32)) + (C_outer_outer * 8)) + (((int)threadIdx.x) & 7)))];
    }
    __syncthreads();
    #pragma unroll
    for (int C_outer_inner = 0; C_outer_inner < 8; ++C_outer_inner) {
      #pragma unroll
      for (int F_c_inner = 0; F_c_inner < 6; ++F_c_inner) {
        output0_local[(F_c_inner)] = (output0_local[(F_c_inner)] + (mediate2_shared[(((C_outer_inner * 112) + (((int)threadIdx.x) % 56)))] * input2_shared[(((((((int)threadIdx.x) / 56) * 48) + (F_c_inner * 8)) + C_outer_inner))]));
        output0_local[((F_c_inner + 6))] = (output0_local[((F_c_inner + 6))] + (mediate2_shared[((((C_outer_inner * 112) + (((int)threadIdx.x) % 56)) + 56))] * input2_shared[(((((((int)threadIdx.x) / 56) * 48) + (F_c_inner * 8)) + C_outer_inner))]));
      }
    }
  }
  for (int F_inner = 0; F_inner < 6; ++F_inner) {
    output0[(((((((((int)blockIdx.x) / 28) * 75264) + ((((int)threadIdx.x) / 56) * 18816)) + (F_inner * 3136)) + ((((int)blockIdx.x) % 28) * 112)) + (((int)threadIdx.x) % 56)))] = output0_local[(F_inner)];
    output0[((((((((((int)blockIdx.x) / 28) * 75264) + ((((int)threadIdx.x) / 56) * 18816)) + (F_inner * 3136)) + ((((int)blockIdx.x) % 28) * 112)) + (((int)threadIdx.x) % 56)) + 56))] = output0_local[((F_inner + 6))];
  }
}

// Saved Perf = 6.614720e-05 sec / run; Step Produced = 559; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.