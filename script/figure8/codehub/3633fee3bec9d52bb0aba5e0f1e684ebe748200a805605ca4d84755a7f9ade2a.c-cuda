// GLOBALS: input0:float32[17, 1, 3, 3], input1:float32[17], input2:float32[32, 17, 112, 112] -> output0:float32[32, 17, 56, 56]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 1, 8, 1], "Toutput0:D3": [-1, 2, 28, 1], "Toutput0:R0": [-1, 1, 1], "Toutput0:R1": [-1, 1, 3], "Toutput0:RA": 1, "Toutput0:S": 2, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 112, N3 in 112;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 112, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 112], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 56, WO in 56, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [17, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [17]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 17, 112, 112]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[17, 1, 3, 3], input1:float32[17], input2:float32[32, 17, 112, 112] -> output0:float32[32, 17, 56, 56]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(224) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 3808
  // [thread_extent] threadIdx.x = 224
  float output0_local[2];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  __shared__ float mediate3_shared[1904];
  // [thread_extent] threadIdx.x = 224
  if (1 <= (((((int)blockIdx.x) % 7) * 16) + (((int)threadIdx.x) / 112))) {
    mediate3_shared[(((int)threadIdx.x))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) - 112))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  }
  mediate3_shared[((((int)threadIdx.x) + 224))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 112))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 448))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 336))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 672))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 560))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 896))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 784))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1120))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 1008))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1344))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 1232))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1568))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 1456))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  if (((int)threadIdx.x) < 112) {
    mediate3_shared[((((int)threadIdx.x) + 1792))] = max((input2[((((((int)blockIdx.x) * 1792) + ((int)threadIdx.x)) + 1680))] + input1[(((((int)blockIdx.x) % 119) / 7))]), 0.000000e+00f);
  }
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 224
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[(((((((int)blockIdx.x) % 119) / 7) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + ((((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) && (1 <= (((int)threadIdx.x) % 28))) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) - 1))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 55))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 111))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 167))] * mediate0_shared[(3)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 223))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 279))] * mediate0_shared[(6)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) ? mediate3_shared[((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 56))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 112))] * mediate0_shared[(4)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 168))] * mediate0_shared[(4)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 224))] * mediate0_shared[(7)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 280))] * mediate0_shared[(7)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 1))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((((int)blockIdx.x) % 7) * 16) + ((((int)threadIdx.x) / 28) * 2))) ? mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 57))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 113))] * mediate0_shared[(5)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 169))] * mediate0_shared[(5)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 225))] * mediate0_shared[(8)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 28) * 224) + ((((int)threadIdx.x) % 28) * 2)) + 281))] * mediate0_shared[(8)]));
  output0[((((((int)blockIdx.x) * 448) + ((((int)threadIdx.x) / 28) * 56)) + (((int)threadIdx.x) % 28)))] = output0_local[(0)];
  output0[(((((((int)blockIdx.x) * 448) + ((((int)threadIdx.x) / 28) * 56)) + (((int)threadIdx.x) % 28)) + 28))] = output0_local[(1)];
}

// Saved Perf = 6.484660e-05 sec / run; Step Produced = 947; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.