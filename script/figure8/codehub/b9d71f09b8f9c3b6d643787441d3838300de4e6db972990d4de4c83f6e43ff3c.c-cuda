// GLOBALS: input0:float32[54, 1, 3, 3], input1:float32[54], input2:float32[32, 54, 56, 56] -> output0:float32[32, 54, 28, 28]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 2], "Toutput0:D1": [-1, 1, 2, 1], "Toutput0:D2": [-1, 1, 2, 1], "Toutput0:D3": [-1, 1, 28, 1], "Toutput0:R0": [-1, 1, 1], "Toutput0:R1": [-1, 1, 3], "Toutput0:RA": 1, "Toutput0:S": 2, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 56, N3 in 56;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 56, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 56], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 28, WO in 28, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [54, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [54]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 54, 56, 56]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[54, 1, 3, 3], input1:float32[54], input2:float32[32, 54, 56, 56] -> output0:float32[32, 54, 28, 28]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(112) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 6048
  // [thread_extent] threadIdx.x = 112
  float output0_local[2];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  __shared__ float mediate3_shared[1120];
  // [thread_extent] threadIdx.x = 112
  if (1 <= (((((int)blockIdx.x) % 14) * 4) + (((int)threadIdx.x) / 56))) {
    mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((int)blockIdx.x) % 14) * 224)) + ((int)threadIdx.x)) - 56))] + input1[((((((int)blockIdx.x) % 378) / 14) * 2))]), 0.000000e+00f);
  }
  mediate3_shared[((((int)threadIdx.x) + 112))] = max((input2[(((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((int)blockIdx.x) % 14) * 224)) + ((int)threadIdx.x)) + 56))] + input1[((((((int)blockIdx.x) % 378) / 14) * 2))]), 0.000000e+00f);
  if (1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) / 56) + 4) % 5))) {
    mediate3_shared[((((int)threadIdx.x) + 224))] = max((input2[(((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + (((((int)threadIdx.x) + 224) / 280) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + ((((((int)threadIdx.x) / 56) + 4) % 5) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + ((((int)threadIdx.x) + 224) / 280)))]), 0.000000e+00f);
  }
  mediate3_shared[((((int)threadIdx.x) + 336))] = max((input2[(((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + (((((int)threadIdx.x) + 336) / 280) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + (((((int)threadIdx.x) / 56) + 1) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + ((((int)threadIdx.x) + 336) / 280)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 448))] = max((input2[(((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + (((((int)threadIdx.x) + 448) / 280) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + (((((int)threadIdx.x) / 56) + 3) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + ((((int)threadIdx.x) + 448) / 280)))]), 0.000000e+00f);
  if (1 <= (((((int)blockIdx.x) % 14) * 4) + (((int)threadIdx.x) / 56))) {
    mediate3_shared[((((int)threadIdx.x) + 560))] = max((input2[(((((((((int)blockIdx.x) / 378) * 338688) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((int)blockIdx.x) % 14) * 224)) + ((int)threadIdx.x)) + 169288))] + input1[((((((int)blockIdx.x) % 378) / 14) * 2))]), 0.000000e+00f);
  }
  mediate3_shared[((((int)threadIdx.x) + 672))] = max((input2[(((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)threadIdx.x) + 672) / 560) * 169344)) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((int)blockIdx.x) % 14) * 224)) + (((((int)threadIdx.x) / 56) + 2) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[((((((int)blockIdx.x) % 378) / 14) * 2))]), 0.000000e+00f);
  if (1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) / 56) + 4) % 5))) {
    mediate3_shared[((((int)threadIdx.x) + 784))] = max((input2[((((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)threadIdx.x) + 784) / 560) * 169344)) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((((int)threadIdx.x) / 56) + 4) / 5) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + ((((((int)threadIdx.x) / 56) + 4) % 5) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + (((((int)threadIdx.x) / 56) + 4) / 5)))]), 0.000000e+00f);
  }
  mediate3_shared[((((int)threadIdx.x) + 896))] = max((input2[((((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)threadIdx.x) + 896) / 560) * 169344)) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((((int)threadIdx.x) / 56) + 6) / 5) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + (((((int)threadIdx.x) / 56) + 1) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + (((((int)threadIdx.x) / 56) + 6) / 5)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1008))] = max((input2[((((((((((((int)blockIdx.x) / 378) * 338688) + (((((int)threadIdx.x) + 1008) / 560) * 169344)) + (((((int)blockIdx.x) % 378) / 14) * 6272)) + ((((((int)threadIdx.x) / 56) + 8) / 5) * 3136)) + ((((int)blockIdx.x) % 14) * 224)) + (((((int)threadIdx.x) / 56) + 3) * 56)) + (((int)threadIdx.x) % 56)) - 56))] + input1[(((((((int)blockIdx.x) % 378) / 14) * 2) + (((((int)threadIdx.x) / 56) + 8) / 5)))]), 0.000000e+00f);
  __shared__ float mediate0_shared[18];
  // [thread_extent] threadIdx.x = 112
  if (((int)threadIdx.x) < 18) {
    mediate0_shared[(((int)threadIdx.x))] = input0[((((((((int)blockIdx.x) % 378) / 14) * 18) + ((((int)threadIdx.x) & 1) * 9)) + (((int)threadIdx.x) >> 1)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + ((((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) && (1 <= (((int)threadIdx.x) % 28))) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) - 1))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 56))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 55))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 6))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 111))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 12))]));
  output0_local[(1)] = (output0_local[(1)] + ((((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) && (1 <= (((int)threadIdx.x) % 28))) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 559))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 56))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 615))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 6))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 671))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 12))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) ? mediate3_shared[(((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 2))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 56))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 8))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 112))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 14))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 560))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 2))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 616))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 8))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 672))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 14))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 1))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 4))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 57))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 10))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 113))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 16))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((((int)blockIdx.x) % 14) * 4) + (((((int)threadIdx.x) % 56) / 28) * 2))) ? mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 561))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 56) + 4))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 617))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 10))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((((((int)threadIdx.x) / 56) * 280) + (((((int)threadIdx.x) % 56) / 28) * 112)) + ((((int)threadIdx.x) % 28) * 2)) + 673))] * mediate0_shared[(((((int)threadIdx.x) / 56) + 16))]));
  for (int N_inner = 0; N_inner < 2; ++N_inner) {
    output0[((((((((((int)blockIdx.x) / 378) * 84672) + (N_inner * 42336)) + (((((int)blockIdx.x) % 378) / 14) * 1568)) + ((((int)threadIdx.x) / 56) * 784)) + ((((int)blockIdx.x) % 14) * 56)) + (((int)threadIdx.x) % 56)))] = output0_local[(N_inner)];
  }
}

// Saved Perf = 5.240160e-05 sec / run; Step Produced = 999; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.