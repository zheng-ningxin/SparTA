// GLOBALS: input0:float32[1024, 1, 3, 3], input1:float32[1024], input2:float32[32, 1024, 7, 7] -> output0:float32[32, 1024, 7, 7]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 2, 1, 1], "Toutput0:D1": [-1, 2, 2, 2], "Toutput0:D2": [-1, 1, 7, 1], "Toutput0:D3": [-1, 1, 7, 1], "Toutput0:R0": [-1, 3, 1], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 1, "Toutput0:S": 2, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 7, N3 in 7;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].when([-1 + KH + HO * 1 >= 0, -1 + KH + HO * 1 < 7, -1 + KW + WO * 1 >= 0, -1 + KW + WO * 1 < 7], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].dtype())) * mediate0[KH, KW, C, 0] where HO in 7, WO in 7, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1024, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [1024]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 1024, 7, 7]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1024, 1, 3, 3], input1:float32[1024], input2:float32[32, 1024, 7, 7] -> output0:float32[32, 1024, 7, 7]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(98) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 2048
  // [thread_extent] threadIdx.x = 98
  float output0_local[8];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(4)] = 0.000000e+00f;
  output0_local[(6)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  output0_local[(5)] = 0.000000e+00f;
  output0_local[(7)] = 0.000000e+00f;
  __shared__ float mediate3_shared[784];
  // [thread_extent] threadIdx.x = 98
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((int)threadIdx.x)))] + input1[((((((int)blockIdx.x) & 127) * 8) + (((int)threadIdx.x) / 49)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 98))] = max((input2[((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((int)threadIdx.x)) + 98))] + input1[(((((((int)blockIdx.x) & 127) * 8) + (((int)threadIdx.x) / 49)) + 2))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 196))] = max((input2[((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((int)threadIdx.x)) + 196))] + input1[(((((((int)blockIdx.x) & 127) * 8) + (((int)threadIdx.x) / 49)) + 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 294))] = max((input2[((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((int)threadIdx.x)) + 294))] + input1[(((((((int)blockIdx.x) & 127) * 8) + (((int)threadIdx.x) / 49)) + 6))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 392))] = max((input2[((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((int)threadIdx.x)) + 50176))] + input1[((((((int)blockIdx.x) & 127) * 8) + (((int)threadIdx.x) / 49)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 490))] = max((input2[(((((((((int)blockIdx.x) >> 7) * 100352) + (((((int)threadIdx.x) + 490) / 392) * 50176)) + ((((int)blockIdx.x) & 127) * 392)) + (((((int)threadIdx.x) / 49) + 2) * 49)) + (((int)threadIdx.x) % 49)))] + input1[((((((int)blockIdx.x) & 127) * 8) + ((((int)threadIdx.x) / 49) + 2)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 588))] = max((input2[(((((((((int)blockIdx.x) >> 7) * 100352) + (((((int)threadIdx.x) + 588) / 392) * 50176)) + ((((int)blockIdx.x) & 127) * 392)) + (((((int)threadIdx.x) / 49) + 4) * 49)) + (((int)threadIdx.x) % 49)))] + input1[((((((int)blockIdx.x) & 127) * 8) + ((((int)threadIdx.x) / 49) + 4)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 686))] = max((input2[(((((((((int)blockIdx.x) >> 7) * 100352) + (((((int)threadIdx.x) + 686) / 392) * 50176)) + ((((int)blockIdx.x) & 127) * 392)) + (((((int)threadIdx.x) / 49) + 6) * 49)) + (((int)threadIdx.x) % 49)))] + input1[((((((int)blockIdx.x) & 127) * 8) + ((((int)threadIdx.x) / 49) + 6)))]), 0.000000e+00f);
  __shared__ float mediate0_shared[72];
  // [thread_extent] threadIdx.x = 98
  if (((int)threadIdx.x) < 72) {
    mediate0_shared[(((int)threadIdx.x))] = input0[(((((((int)blockIdx.x) & 127) * 72) + ((((int)threadIdx.x) & 7) * 9)) + (((int)threadIdx.x) >> 3)))];
  }
  __syncthreads();
  for (int KW_outer_inner = 0; KW_outer_inner < 3; ++KW_outer_inner) {
    output0_local[(0)] = (output0_local[(0)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) - 8))] : 0.000000e+00f) * mediate0_shared[(((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)))]));
    output0_local[(2)] = (output0_local[(2)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 188))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 4))]));
    output0_local[(4)] = (output0_local[(4)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 384))] : 0.000000e+00f) * mediate0_shared[(((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)))]));
    output0_local[(6)] = (output0_local[(6)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 580))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 4))]));
    output0_local[(1)] = (output0_local[(1)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 41))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 1))]));
    output0_local[(3)] = (output0_local[(3)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 237))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 5))]));
    output0_local[(5)] = (output0_local[(5)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 433))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 1))]));
    output0_local[(7)] = (output0_local[(7)] + (((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 629))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 5))]));
    output0_local[(0)] = (output0_local[(0)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) - 1))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 24))]));
    output0_local[(2)] = (output0_local[(2)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 195))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 28))]));
    output0_local[(4)] = (output0_local[(4)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 391))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 24))]));
    output0_local[(6)] = (output0_local[(6)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 587))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 28))]));
    output0_local[(1)] = (output0_local[(1)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 48))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 25))]));
    output0_local[(3)] = (output0_local[(3)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 244))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 29))]));
    output0_local[(5)] = (output0_local[(5)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 440))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 25))]));
    output0_local[(7)] = (output0_local[(7)] + ((((1 <= (KW_outer_inner + (((int)threadIdx.x) % 7))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 636))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 29))]));
    output0_local[(0)] = (output0_local[(0)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 6))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 48))]));
    output0_local[(2)] = (output0_local[(2)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 202))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 52))]));
    output0_local[(4)] = (output0_local[(4)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 398))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 48))]));
    output0_local[(6)] = (output0_local[(6)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 594))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 52))]));
    output0_local[(1)] = (output0_local[(1)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 55))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 49))]));
    output0_local[(3)] = (output0_local[(3)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 251))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 53))]));
    output0_local[(5)] = (output0_local[(5)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 447))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 49))]));
    output0_local[(7)] = (output0_local[(7)] + ((((((((int)threadIdx.x) % 49) < 42) && (1 <= (KW_outer_inner + (((int)threadIdx.x) % 7)))) && ((KW_outer_inner + (((int)threadIdx.x) % 7)) < 8)) ? mediate3_shared[((((((((int)threadIdx.x) / 49) * 98) + KW_outer_inner) + (((int)threadIdx.x) % 49)) + 643))] : 0.000000e+00f) * mediate0_shared[((((KW_outer_inner * 8) + ((((int)threadIdx.x) / 49) * 2)) + 53))]));
  }
  for (int C_inner = 0; C_inner < 2; ++C_inner) {
    output0[(((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((((int)threadIdx.x) / 49) * 98)) + (C_inner * 49)) + (((int)threadIdx.x) % 49)))] = output0_local[(C_inner)];
    output0[((((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((((int)threadIdx.x) / 49) * 98)) + (C_inner * 49)) + (((int)threadIdx.x) % 49)) + 196))] = output0_local[((C_inner + 2))];
    output0[((((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((((int)threadIdx.x) / 49) * 98)) + (C_inner * 49)) + (((int)threadIdx.x) % 49)) + 50176))] = output0_local[((C_inner + 4))];
    output0[((((((((((int)blockIdx.x) >> 7) * 100352) + ((((int)blockIdx.x) & 127) * 392)) + ((((int)threadIdx.x) / 49) * 98)) + (C_inner * 49)) + (((int)threadIdx.x) % 49)) + 50372))] = output0_local[((C_inner + 6))];
  }
}

// Saved Perf = 2.564520e-05 sec / run; Step Produced = 176; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.