// GLOBALS: input0:float32[212, 1, 3, 3], input1:float32[212], input2:float32[32, 212, 14, 14] -> output0:float32[32, 212, 7, 7]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 1], "Toutput0:D1": [-1, 1, 4, 1], "Toutput0:D2": [-1, 1, 7, 1], "Toutput0:D3": [-1, 1, 1, 7], "Toutput0:R0": [-1, 1, 3], "Toutput0:R1": [-1, 1, 1], "Toutput0:RA": 0, "Toutput0:S": 3, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 14, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 14], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 7, WO in 7, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [212, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [212]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 212, 14, 14]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[212, 1, 3, 3], input1:float32[212], input2:float32[32, 212, 14, 14] -> output0:float32[32, 212, 7, 7]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(56) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 848
  // [thread_extent] threadIdx.x = 56
  float output0_local[7];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  output0_local[(4)] = 0.000000e+00f;
  output0_local[(5)] = 0.000000e+00f;
  output0_local[(6)] = 0.000000e+00f;
  __shared__ float mediate3_shared[1568];
  // [thread_extent] threadIdx.x = 56
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 56))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 56))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 112))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 112))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 168))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 168))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 168) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 224))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 224))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 224) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 280))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 280))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 280) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 336))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 336))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 336) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 392))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 392))] + input1[((((((int)blockIdx.x) % 53) * 4) + 2))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 448))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 448))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 448) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 504))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 504))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 504) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 560))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 560))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 560) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 616))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 616))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 616) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 672))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 672))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 672) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 728))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 728))] + input1[((((((int)blockIdx.x) % 53) * 4) + ((((int)threadIdx.x) + 728) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 784))] = max((input2[((((((((int)blockIdx.x) / 53) * 83104) + ((((int)blockIdx.x) % 53) * 784)) + ((int)threadIdx.x)) + 41552))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 840))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 840) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 4) * 14)) + (((int)threadIdx.x) % 14)))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 896))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 896) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 8) * 14)) + (((int)threadIdx.x) % 14)))] + input1[(((((int)blockIdx.x) % 53) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 952))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 952) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 12) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 12) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1008))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1008) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 16) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 16) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1064))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1064) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 20) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 20) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1120))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1120) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 24) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 24) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1176))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1176) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 28) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 28) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1232))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1232) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 32) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 32) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1288))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1288) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 36) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 36) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1344))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1344) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 40) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 40) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1400))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1400) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 44) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 44) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1456))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1456) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 48) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 48) / 14)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 1512))] = max((input2[(((((((((int)blockIdx.x) / 53) * 83104) + (((((int)threadIdx.x) + 1512) / 784) * 41552)) + ((((int)blockIdx.x) % 53) * 784)) + (((((int)threadIdx.x) / 14) + 52) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((((int)blockIdx.x) % 53) * 4) + (((((int)threadIdx.x) / 14) + 52) / 14)))]), 0.000000e+00f);
  __shared__ float mediate0_shared[36];
  // [thread_extent] threadIdx.x = 56
  if (((int)threadIdx.x) < 36) {
    mediate0_shared[(((int)threadIdx.x))] = input0[(((((((int)blockIdx.x) % 53) * 36) + ((((int)threadIdx.x) & 3) * 9)) + (((int)threadIdx.x) >> 2)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 14))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 13))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 13))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 12))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 11))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 11))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 10))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 9))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 9))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 8))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 7))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 7))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 6))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 5))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 5))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 4))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 3))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 3))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) % 28) / 7))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 2))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 4))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((int)threadIdx.x) * 28) - 1))] : 0.000000e+00f) * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 8))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((int)threadIdx.x) * 28))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 1))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 1))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 2))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 3))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 3))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 4))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 5))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 5))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 6))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 7))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 7))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 8))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 9))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 9))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 10))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 11))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 11))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 12))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 12))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 16))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 13))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 20))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 14))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 15))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 15))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 16))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 17))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 17))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 18))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 19))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 19))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 20))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 21))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 21))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 22))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 23))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 23))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 24))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 25))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 25))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 24))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 26))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 28))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((int)threadIdx.x) * 28) + 27))] * mediate0_shared[((((((int)threadIdx.x) % 28) / 7) + 32))]));
  for (int WO_inner = 0; WO_inner < 7; ++WO_inner) {
    output0[(((((((((int)blockIdx.x) / 53) * 20776) + ((((int)threadIdx.x) / 28) * 10388)) + ((((int)blockIdx.x) % 53) * 196)) + ((((int)threadIdx.x) % 28) * 7)) + WO_inner))] = output0_local[(WO_inner)];
  }
}

// Saved Perf = 1.349120e-05 sec / run; Step Produced = 725; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.