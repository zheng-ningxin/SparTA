// GLOBALS: input0:int64[1], input1:int64[1], input2:int64[1], input3:int64[1] -> output0:int64[4]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 2, 1], "Foutput0:O": [0], "Foutput0:S": 3, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" output0[N0] =  input0[N0 - 0].when(N0 < 1,  input1[N0 - 1].when(N0 < 2,  input2[N0 - 2].when(N0 < 3, input3[N0 - 3]) ) )  where N0 in 4; ", input_dict={ "input0" : { "dtype" : "int64", "shape" : [1]} ,  "input1" : { "dtype" : "int64", "shape" : [1]} ,  "input2" : { "dtype" : "int64", "shape" : [1]} ,  "input3" : { "dtype" : "int64", "shape" : [1]} })


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:int64[1], input1:int64[1], input2:int64[1], input3:int64[1] -> output0:int64[4]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(2) void template_op_kernel0(int64_t* __restrict__ input0, int64_t* __restrict__ input1, int64_t* __restrict__ input2, int64_t* __restrict__ input3, int64_t* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 2
  // [thread_extent] threadIdx.x = 2
  output0[(((((int)blockIdx.x) * 2) + ((int)threadIdx.x)))] = ((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) < 1) ? input0[(((((int)blockIdx.x) * 2) + ((int)threadIdx.x)))] : ((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) < 2) ? input1[((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) - 1))] : ((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) < 3) ? input2[((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) - 2))] : input3[((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) - 3))])));
}

// Saved Perf = 9.192940e-06 sec / run; Step Produced = 144; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.