// GLOBALS: input0:float32[64, 1, 3, 3], input1:float32[64], input2:float32[32, 64, 56, 56] -> output0:float32[32, 64, 28, 28]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 1, 4, 1], "Toutput0:D3": [-1, 1, 28, 1], "Toutput0:R0": [-1, 3, 1], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 1, "Toutput0:S": 2, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 56, N3 in 56;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 56, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 56], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 28, WO in 28, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [64, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [64]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 64, 56, 56]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[64, 1, 3, 3], input1:float32[64], input2:float32[32, 64, 56, 56] -> output0:float32[32, 64, 28, 28]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(112) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 14336
  // [thread_extent] threadIdx.x = 112
  float output0_local[1];
  output0_local[(0)] = 0.000000e+00f;
  __shared__ float mediate3_shared[504];
  #pragma unroll
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 112
    if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) / 56)) < 9) {
      if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 112) + ((int)threadIdx.x)) < 504) {
        if (1 <= ((((((int)blockIdx.x) % 7) * 8) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2)) + (((int)threadIdx.x) / 56))) {
          mediate3_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 112) + ((int)threadIdx.x)))] = max((input2[(((((((int)blockIdx.x) * 448) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 112)) + ((int)threadIdx.x)) - 56))] + input1[(((((int)blockIdx.x) % 448) / 7))]), 0.000000e+00f);
        }
      }
    }
  }
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 112
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[(((((((int)blockIdx.x) % 448) / 7) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  #pragma unroll
  for (int KW_outer_inner = 0; KW_outer_inner < 3; ++KW_outer_inner) {
    #pragma unroll
    for (int KH = 0; KH < 3; ++KH) {
      output0_local[(0)] = (output0_local[(0)] + ((((1 <= ((((((int)blockIdx.x) % 7) * 8) + ((((int)threadIdx.x) / 28) * 2)) + KH)) && (1 <= (((((int)threadIdx.x) % 28) * 2) + KW_outer_inner))) ? mediate3_shared[(((((((((int)threadIdx.x) / 28) * 112) + (KH * 56)) + ((((int)threadIdx.x) % 28) * 2)) + KW_outer_inner) - 1))] : 0.000000e+00f) * mediate0_shared[(((KH * 3) + KW_outer_inner))]));
    }
  }
  output0[(((((int)blockIdx.x) * 112) + ((int)threadIdx.x)))] = output0_local[(0)];
}

// Saved Perf = 6.053120e-05 sec / run; Step Produced = 895; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.