// GLOBALS: input0:float32[120], input1:float32[120], input2:float32[32, 120] -> output0:float32[32, 120]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 2, 8], "Foutput0:D1": [-1, 3, 10, 4], "Foutput0:O": [1, 0], "Foutput0:S": 0, "Foutput0:R": 0}
// COMPUTE_V1: - einstein_v2("mediate0[N0] = input0[N0] * input1[N0]; mediate1[N0, N1] = mediate0[N1] where N0 in 32;   output0[N0, N1] = input2[N0, N1] + mediate1[N0, N1]; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [120]} ,  "input1" : { "dtype" : "float32", "shape" : [120]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 120]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[120], input1:float32[120], input2:float32[32, 120] -> output0:float32[32, 120]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(20) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 2
  // [thread_extent] threadIdx.x = 2
  // [thread_extent] blockIdx.y = 1
  // [thread_extent] threadIdx.y = 10
  output0[((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)))] = (input2[((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 1))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 1))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 2))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 2))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 3))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 3))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 40))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 40))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 41))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 41))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 42))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 42))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 43))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 43))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 80))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 80))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 81))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 81))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 82))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 82))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 83))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 83))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 120))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 120))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 121))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 121))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 122))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 122))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 123))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 123))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 160))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 160))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 161))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 161))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 162))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 162))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 163))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 163))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 200))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 200))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 201))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 201))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 202))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 202))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 203))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 203))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 240))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 240))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 241))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 241))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 242))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 242))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 243))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 243))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 280))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 280))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 281))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 281))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 282))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 282))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 283))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 283))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 320))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 320))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 321))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 321))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 322))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 322))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 323))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 323))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 360))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 360))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 361))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 361))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 362))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 362))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 363))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 363))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 400))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 400))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 401))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 401))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 402))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 402))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 403))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 403))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 440))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 440))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 441))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 441))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 442))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 442))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 443))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 443))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 480))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 480))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 481))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 481))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 482))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 482))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 483))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 483))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 520))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 520))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 521))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 521))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 522))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 522))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 523))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 523))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 560))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 560))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 561))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 561))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 562))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 562))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 563))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 563))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 600))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 600))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 601))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 601))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 602))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 602))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 603))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 603))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 640))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 640))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 641))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 641))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 642))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 642))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 643))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 643))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 680))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 680))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 681))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 681))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 682))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 682))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 683))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 683))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 720))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 720))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 721))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 721))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 722))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 722))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 723))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 723))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 760))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 760))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 761))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 761))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 762))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 762))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 763))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 763))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 800))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 800))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 801))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 801))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 802))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 802))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 803))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 803))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 840))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 840))] + (input0[((((int)threadIdx.y) * 4))] * input1[((((int)threadIdx.y) * 4))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 841))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 841))] + (input0[(((((int)threadIdx.y) * 4) + 1))] * input1[(((((int)threadIdx.y) * 4) + 1))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 842))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 842))] + (input0[(((((int)threadIdx.y) * 4) + 2))] * input1[(((((int)threadIdx.y) * 4) + 2))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 843))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 843))] + (input0[(((((int)threadIdx.y) * 4) + 3))] * input1[(((((int)threadIdx.y) * 4) + 3))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 880))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 880))] + (input0[(((((int)threadIdx.y) * 4) + 40))] * input1[(((((int)threadIdx.y) * 4) + 40))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 881))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 881))] + (input0[(((((int)threadIdx.y) * 4) + 41))] * input1[(((((int)threadIdx.y) * 4) + 41))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 882))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 882))] + (input0[(((((int)threadIdx.y) * 4) + 42))] * input1[(((((int)threadIdx.y) * 4) + 42))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 883))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 883))] + (input0[(((((int)threadIdx.y) * 4) + 43))] * input1[(((((int)threadIdx.y) * 4) + 43))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 920))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 920))] + (input0[(((((int)threadIdx.y) * 4) + 80))] * input1[(((((int)threadIdx.y) * 4) + 80))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 921))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 921))] + (input0[(((((int)threadIdx.y) * 4) + 81))] * input1[(((((int)threadIdx.y) * 4) + 81))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 922))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 922))] + (input0[(((((int)threadIdx.y) * 4) + 82))] * input1[(((((int)threadIdx.y) * 4) + 82))]));
  output0[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 923))] = (input2[(((((((int)blockIdx.x) * 1920) + (((int)threadIdx.x) * 960)) + (((int)threadIdx.y) * 4)) + 923))] + (input0[(((((int)threadIdx.y) * 4) + 83))] * input1[(((((int)threadIdx.y) * 4) + 83))]));
}

// Saved Perf = 8.884150e-06 sec / run; Step Produced = 506; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.