// GLOBALS: input0:float32[230], input1:float32[32, 230, 14, 14], input2:float32[218, 230, 1, 1] -> output0:float32[32, 218, 14, 14]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 8], "Toutput0:D1": [-1, 1, 109, 2], "Toutput0:D2": [-1, 1, 1, 2], "Toutput0:D3": [-1, 1, 1, 2], "Toutput0:R0": [-1, 1, 10], "Toutput0:RA": 0, "Toutput0:S": 0, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2, N3] = input0[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate1[N0, N1, N2, N3] = input1[N0, N1, N2, N3] + mediate0[N0, N1, N2, N3]; mediate2[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate1[N0, N1, N2, N3].dtype())]); output0[N, F, HO, WO] +=! mediate2[N, C, -0 + KH + HO * 1, -0 + KW + WO * 1] * input2[F, C, KH, KW] where HO in 14, WO in 14; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [230]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 230, 14, 14]} ,  "input2" : { "dtype" : "float32", "shape" : [218, 230, 1, 1]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[230], input1:float32[32, 230, 14, 14], input2:float32[218, 230, 1, 1] -> output0:float32[32, 218, 14, 14]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(109) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 196
  // [thread_extent] threadIdx.x = 109
  float output0_local[64];
  for (int N_c_inner_init = 0; N_c_inner_init < 8; ++N_c_inner_init) {
    for (int F_c_inner_init = 0; F_c_inner_init < 2; ++F_c_inner_init) {
      for (int HO_c_inner_init = 0; HO_c_inner_init < 2; ++HO_c_inner_init) {
        for (int WO_c_inner_init = 0; WO_c_inner_init < 2; ++WO_c_inner_init) {
          output0_local[(((((N_c_inner_init * 8) + (F_c_inner_init * 4)) + (HO_c_inner_init * 2)) + WO_c_inner_init))] = 0.000000e+00f;
        }
      }
    }
  }
  for (int C_outer_outer = 0; C_outer_outer < 23; ++C_outer_outer) {
    __shared__ float mediate2_shared[320];
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 109
      if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) < 320) {
        mediate2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)))] = max((input1[((((((((((((int)blockIdx.x) / 49) * 360640) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) / 40) * 45080)) + (C_outer_outer * 1960)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) % 40) >> 2) * 196)) + (((((int)blockIdx.x) % 49) / 7) * 28)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) & 3) >> 1) * 14)) + ((((int)blockIdx.x) % 7) * 2)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) & 1)))] + input0[(((C_outer_outer * 10) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 109) + ((int)threadIdx.x)) % 40) >> 2)))]), 0.000000e+00f);
      }
    }
    __shared__ float input2_shared[2180];
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 < 20; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 109
      input2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 109) + ((int)threadIdx.x)))] = input2[(((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 109) + ((int)threadIdx.x)) / 10) * 230) + (C_outer_outer * 10)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 109) + ((int)threadIdx.x)) % 10)))];
    }
    __syncthreads();
    for (int C_inner = 0; C_inner < 10; ++C_inner) {
      for (int N_c_inner = 0; N_c_inner < 8; ++N_c_inner) {
        for (int F_c_inner = 0; F_c_inner < 2; ++F_c_inner) {
          for (int HO_c_inner = 0; HO_c_inner < 2; ++HO_c_inner) {
            for (int WO_c_inner = 0; WO_c_inner < 2; ++WO_c_inner) {
              output0_local[(((((N_c_inner * 8) + (F_c_inner * 4)) + (HO_c_inner * 2)) + WO_c_inner))] = (output0_local[(((((N_c_inner * 8) + (F_c_inner * 4)) + (HO_c_inner * 2)) + WO_c_inner))] + (mediate2_shared[(((((N_c_inner * 40) + (C_inner * 4)) + (HO_c_inner * 2)) + WO_c_inner))] * input2_shared[((((((int)threadIdx.x) * 20) + (F_c_inner * 10)) + C_inner))]));
            }
          }
        }
      }
    }
  }
  for (int N_inner = 0; N_inner < 8; ++N_inner) {
    for (int F_inner = 0; F_inner < 2; ++F_inner) {
      for (int HO_inner = 0; HO_inner < 2; ++HO_inner) {
        for (int WO_inner = 0; WO_inner < 2; ++WO_inner) {
          output0[((((((((((((int)blockIdx.x) / 49) * 341824) + (N_inner * 42728)) + (((int)threadIdx.x) * 392)) + (F_inner * 196)) + (((((int)blockIdx.x) % 49) / 7) * 28)) + (HO_inner * 14)) + ((((int)blockIdx.x) % 7) * 2)) + WO_inner))] = output0_local[(((((N_inner * 8) + (F_inner * 4)) + (HO_inner * 2)) + WO_inner))];
        }
      }
    }
  }
}

// Saved Perf = 1.379380e-04 sec / run; Step Produced = 715; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.