// GLOBALS: input0:float32[1], input1:float32[32, 49], input2:float32[32, 49, 512] -> output0:float32[32, 49, 512]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 2, 2], "Foutput0:D1": [-1, 1, 1, 1], "Foutput0:D2": [-1, 8, 8, 4], "Foutput0:O": [1, 0, 2], "Foutput0:S": 0, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1] = input0[0] where N0 in 32, N1 in 49;  mediate1[N0, N1] = input1[N0, N1] / mediate0[N0, N1]; mediate2[N0, N1, N2] = mediate1[N0, N1] where N2 in 1;   mediate3[N0, N1] = mediate2[N0, N1, 0] ;   mediate4[N0, N1, N2] = mediate3[N0, N1] where N2 in 512;  output0[N0, N1, N2] = input2[N0, N1, N2] - mediate4[N0, N1, N2];", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 49, 512]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1], input1:float32[32, 49], input2:float32[32, 49, 512] -> output0:float32[32, 49, 512]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(16) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8
  // [thread_extent] threadIdx.x = 2
  // [thread_extent] blockIdx.y = 49
  // [thread_extent] threadIdx.y = 1
  // [thread_extent] blockIdx.z = 2
  // [thread_extent] threadIdx.z = 8
  output0[((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)))] = (input2[((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25088))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25088))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 1))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 1))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25089))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25089))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 2))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 2))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25090))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25090))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 3))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 3))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25091))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25091))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 32))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 32))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25120))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25120))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 33))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 33))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25121))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25121))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 34))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 34))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25122))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25122))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 35))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 35))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25123))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25123))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 64))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 64))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25152))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25152))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 65))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 65))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25153))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25153))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 66))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 66))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25154))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25154))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 67))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 67))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25155))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25155))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 96))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 96))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25184))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25184))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 97))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 97))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25185))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25185))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 98))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 98))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25186))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25186))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 99))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 99))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25187))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25187))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 128))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 128))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25216))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25216))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 129))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 129))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25217))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25217))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 130))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 130))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25218))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25218))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 131))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 131))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25219))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25219))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 160))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 160))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25248))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25248))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 161))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 161))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25249))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25249))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 162))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 162))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25250))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25250))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 163))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 163))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25251))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25251))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 192))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 192))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25280))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25280))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 193))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 193))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25281))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25281))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 194))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 194))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25282))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25282))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 195))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 195))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25283))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25283))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 224))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 224))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25312))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25312))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 225))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 225))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25313))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25313))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 226))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 226))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25314))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25314))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 227))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 227))] - (input1[((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25315))] = (input2[(((((((((int)blockIdx.x) * 100352) + (((int)threadIdx.x) * 50176)) + (((int)blockIdx.y) * 512)) + (((int)blockIdx.z) * 256)) + (((int)threadIdx.z) * 4)) + 25315))] - (input1[(((((((int)blockIdx.x) * 196) + (((int)threadIdx.x) * 98)) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
}

// Saved Perf = 8.662030e-06 sec / run; Step Produced = 902; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.