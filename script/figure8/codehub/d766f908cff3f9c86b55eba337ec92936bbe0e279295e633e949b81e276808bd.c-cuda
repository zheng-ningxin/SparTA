// GLOBALS: input0:float32[32, 128, 49] -> output0:float32[32, 8, 49]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 1, 1], "Foutput0:D1": [-1, 1, 2, 2], "Foutput0:D2": [-1, 7, 7, 1], "Foutput0:O": [1, 2, 0], "Foutput0:S": 4, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" output0[N0, N1, N2] = input0[N0 + 0, N1 + 32, N2 + 0] where N0 in 32 , N1 in 8 , N2 in 49; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [32, 128, 49]} })


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[32, 128, 49] -> output0:float32[32, 8, 49]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(14) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 32
  // [thread_extent] threadIdx.x = 1
  // [thread_extent] blockIdx.y = 2
  // [thread_extent] threadIdx.y = 2
  // [thread_extent] blockIdx.z = 1
  // [thread_extent] threadIdx.z = 7
  output0[(((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1568))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 49))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1617))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 7))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1575))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 56))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1624))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 14))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1582))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 63))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1631))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 21))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1589))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 70))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1638))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 28))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1596))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 77))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1645))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 35))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1603))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 84))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1652))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 42))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1610))];
  output0[((((((((int)blockIdx.x) * 392) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 91))] = input0[((((((((int)blockIdx.x) * 6272) + (((int)blockIdx.y) * 196)) + (((int)threadIdx.y) * 98)) + ((int)threadIdx.z)) + 1659))];
}

// Saved Perf = 2.020750e-06 sec / run; Step Produced = 332; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.