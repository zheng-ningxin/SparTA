// GLOBALS: input0:float32[1], input1:float32[32, 49], input2:float32[32, 512, 49] -> output0:float32[32, 49, 512]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 1, 2], "Foutput0:D1": [-1, 1, 7, 1], "Foutput0:D2": [-1, 16, 8, 1], "Foutput0:O": [1, 2, 0], "Foutput0:S": 2, "Foutput0:R": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1] = input0[0] where N0 in 32, N1 in 49;  mediate1[N0, N1] = input1[N0, N1] / mediate0[N0, N1]; mediate2[N0, N1, N2] = mediate1[N0, N2] where N1 in 1;   mediate3[N0, N1] = mediate2[N0, 0, N1] ;   mediate4[N0, N1, N2] = mediate3[N0, N2] where N1 in 512;  mediate5[N0, N1, N2] = input2[N0, N1, N2] - mediate4[N0, N1, N2]; output0[N0, N2, N1] = mediate5[N0, N1, N2] ; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 512, 49]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1], input1:float32[32, 49], input2:float32[32, 512, 49] -> output0:float32[32, 49, 512]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(56) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 16
  // [thread_extent] threadIdx.x = 1
  // [thread_extent] blockIdx.y = 7
  // [thread_extent] threadIdx.y = 7
  // [thread_extent] blockIdx.z = 4
  // [thread_extent] threadIdx.z = 8
  for (int vthread_s = 0; vthread_s < 16; ++vthread_s) {
    output0[(((((((((int)blockIdx.x) * 50176) + (((int)blockIdx.y) * 3584)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.z) * 128)) + (vthread_s * 8)) + ((int)threadIdx.z)))] = (input2[(((((((((int)blockIdx.x) * 50176) + (((int)blockIdx.z) * 6272)) + (vthread_s * 392)) + (((int)threadIdx.z) * 49)) + (((int)blockIdx.y) * 7)) + ((int)threadIdx.y)))] - (input1[((((((int)blockIdx.x) * 98) + (((int)blockIdx.y) * 7)) + ((int)threadIdx.y)))] / input0[(0)]));
  }
  for (int vthread_s1 = 0; vthread_s1 < 16; ++vthread_s1) {
    output0[((((((((((int)blockIdx.x) * 50176) + (((int)blockIdx.y) * 3584)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.z) * 128)) + (vthread_s1 * 8)) + ((int)threadIdx.z)) + 25088))] = (input2[((((((((((int)blockIdx.x) * 50176) + (((int)blockIdx.z) * 6272)) + (vthread_s1 * 392)) + (((int)threadIdx.z) * 49)) + (((int)blockIdx.y) * 7)) + ((int)threadIdx.y)) + 25088))] - (input1[(((((((int)blockIdx.x) * 98) + (((int)blockIdx.y) * 7)) + ((int)threadIdx.y)) + 49))] / input0[(0)]));
  }
}

// Saved Perf = 1.067650e-05 sec / run; Step Produced = 904; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.