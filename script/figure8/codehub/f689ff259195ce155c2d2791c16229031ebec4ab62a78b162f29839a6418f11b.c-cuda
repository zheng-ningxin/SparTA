// GLOBALS: input0:float32[208, 1, 3, 3], input1:float32[208], input2:float32[32, 208, 14, 14] -> output0:float32[32, 208, 7, 7]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 4, 1], "Toutput0:D2": [-1, 7, 1, 1], "Toutput0:D3": [-1, 1, 7, 1], "Toutput0:R0": [-1, 1, 3], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 0, "Toutput0:S": 3, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 14, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 14], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 7, WO in 7, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [208, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [208]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 208, 14, 14]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[208, 1, 3, 3], input1:float32[208], input2:float32[32, 208, 14, 14] -> output0:float32[32, 208, 7, 7]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(28) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 1664
  // [thread_extent] threadIdx.x = 28
  float output0_local[7];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  output0_local[(4)] = 0.000000e+00f;
  output0_local[(5)] = 0.000000e+00f;
  output0_local[(6)] = 0.000000e+00f;
  __shared__ float mediate3_shared[784];
  // [thread_extent] threadIdx.x = 28
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 28))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 28))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 56))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 56))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 84))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 84))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 112))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 112))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 140))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 140))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 168))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 168))] + input1[(((((int)blockIdx.x) % 52) * 4))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 196))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 196))] + input1[((((((int)blockIdx.x) % 52) * 4) + 1))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 224))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 224))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 224) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 252))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 252))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 252) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 280))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 280))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 280) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 308))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 308))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 308) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 336))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 336))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 336) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 364))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 364))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 364) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 392))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 392))] + input1[((((((int)blockIdx.x) % 52) * 4) + 2))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 420))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 420))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 420) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 448))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 448))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 448) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 476))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 476))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 476) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 504))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 504))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 504) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 532))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 532))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 532) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 560))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 560))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 560) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 588))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 588))] + input1[((((((int)blockIdx.x) % 52) * 4) + 3))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 616))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 616))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 616) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 644))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 644))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 644) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 672))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 672))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 672) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 700))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 700))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 700) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 728))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 728))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 728) / 196)))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 756))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 756))] + input1[((((((int)blockIdx.x) % 52) * 4) + ((((int)threadIdx.x) + 756) / 196)))]), 0.000000e+00f);
  __shared__ float mediate0_shared[36];
  // [thread_extent] threadIdx.x = 28
  mediate0_shared[(((int)threadIdx.x))] = input0[(((((((int)blockIdx.x) % 52) * 36) + ((((int)threadIdx.x) & 3) * 9)) + (((int)threadIdx.x) >> 2)))];
  if (((int)threadIdx.x) < 8) {
    mediate0_shared[((((int)threadIdx.x) + 28))] = input0[((((((((int)blockIdx.x) % 52) * 36) + ((((int)threadIdx.x) & 3) * 9)) + (((int)threadIdx.x) >> 2)) + 7))];
  }
  __syncthreads();
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 13))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 41))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 69))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 97))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 125))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 153))] : 0.000000e+00f) * mediate0_shared[((((int)threadIdx.x) / 7))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 14))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 42))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 70))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 98))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 126))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 154))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 4))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 15))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 43))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 71))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 99))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 127))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 155))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 8))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) - 1))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 27))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 55))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 83))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 111))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 139))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 167))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 12))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 28))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 56))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 84))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 112))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 140))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 168))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 16))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 1))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 29))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 57))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 85))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 113))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 141))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 169))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 20))]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 13))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 41))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 69))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 97))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 125))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 153))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(6)] = (output0_local[(6)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 181))] : 0.000000e+00f) * mediate0_shared[(((((int)threadIdx.x) / 7) + 24))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 14))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 42))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 70))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 98))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 126))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 154))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 182))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 28))]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 15))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 43))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 71))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 99))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 127))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 155))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 196) + ((((int)threadIdx.x) % 7) * 2)) + 183))] * mediate0_shared[(((((int)threadIdx.x) / 7) + 32))]));
  output0[((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)))] = output0_local[(0)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 7))] = output0_local[(1)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 14))] = output0_local[(2)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 21))] = output0_local[(3)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 28))] = output0_local[(4)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 35))] = output0_local[(5)];
  output0[(((((((int)blockIdx.x) * 196) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 42))] = output0_local[(6)];
}

// Saved Perf = 1.300320e-05 sec / run; Step Produced = 825; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.