// GLOBALS: input0:float32[1], input1:float32[1], input2:float32[1], input4:float32[32, 512, 99], input5:float32[512, 512, 2] -> output0:float32[32, 512, 49]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 4, 1, 1], "Toutput0:D1": [-1, 8, 16, 1], "Toutput0:D2": [-1, 1, 7, 1], "Toutput0:R0": [-1, 2, 1], "Toutput0:R1": [-1, 2, 4], "Toutput0:RA": 1, "Toutput0:S": 0, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[0] where N0 in 32, N1 in 512, N2 in 99;   mediate1[N0, N1, N2] = input1[0] where N0 in 32, N1 in 512, N2 in 99;   mediate2[N0, N1, N2] = input2[0] where N0 in 32, N1 in 512, N2 in 99;  mediate3[N0, N1, N2] = input4[N0, N1, N2] / mediate2[N0, N1, N2];mediate4[N0, N1, N2] = mediate3[N0, N1, N2].call(`erf`); mediate5[N0, N1, N2] = mediate4[N0, N1, N2] + mediate1[N0, N1, N2]; mediate6[N0, N1, N2] = input4[N0, N1, N2] * mediate5[N0, N1, N2];mediate7[N0, N1, N2] = mediate6[N0, N1, N2] * mediate0[N0, N1, N2]; output0[N, F, WO] +=! mediate7[N, C, -0 + KW + WO * 2] * input5[F, C, KW] where WO in 49; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1]} ,  "input1" : { "dtype" : "float32", "shape" : [1]} ,  "input2" : { "dtype" : "float32", "shape" : [1]} ,  "input4" : { "dtype" : "float32", "shape" : [32, 512, 99]} ,  "input5" : { "dtype" : "float32", "shape" : [512, 512, 2]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1], input1:float32[1], input2:float32[1], input4:float32[32, 512, 99], input5:float32[512, 512, 2] -> output0:float32[32, 512, 49]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(112) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ input4, float* __restrict__ input5, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 224
  // [thread_extent] threadIdx.x = 112
  float output0_local[32];
  for (int vthread_s = 0; vthread_s < 32; ++vthread_s) {
    output0_local[(vthread_s)] = 0.000000e+00f;
  }
  for (int C_outer_outer = 0; C_outer_outer < 64; ++C_outer_outer) {
    __shared__ float mediate7_shared[448];
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_outer_outer < 4; ++ax0_ax1_fused_ax2_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 112
      mediate7_shared[(((ax0_ax1_fused_ax2_fused_outer_outer * 112) + ((int)threadIdx.x)))] = ((input4[((((((((((int)blockIdx.x) / 28) * 202752) + (ax0_ax1_fused_ax2_fused_outer_outer * 50688)) + (C_outer_outer * 792)) + ((((int)threadIdx.x) / 14) * 99)) + ((((int)blockIdx.x) % 7) * 14)) + (((int)threadIdx.x) % 14)))] * (erf((input4[((((((((((int)blockIdx.x) / 28) * 202752) + (ax0_ax1_fused_ax2_fused_outer_outer * 50688)) + (C_outer_outer * 792)) + ((((int)threadIdx.x) / 14) * 99)) + ((((int)blockIdx.x) % 7) * 14)) + (((int)threadIdx.x) % 14)))] / input2[(0)])) + input1[(0)])) * input0[(0)]);
    }
    __shared__ float input5_shared[2048];
    for (int ax0_ax1_fused_ax2_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_outer_outer1 < 19; ++ax0_ax1_fused_ax2_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 112
      if (((ax0_ax1_fused_ax2_fused_outer_outer1 * 7) + (((int)threadIdx.x) >> 4)) < 128) {
        if (((ax0_ax1_fused_ax2_fused_outer_outer1 * 56) + (((int)threadIdx.x) >> 1)) < 1024) {
          if (((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) < 2048) {
            if ((((((((int)blockIdx.x) % 28) / 7) * 128) + (ax0_ax1_fused_ax2_fused_outer_outer1 * 7)) + (((int)threadIdx.x) >> 4)) < 512) {
              input5_shared[(((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)))] = input5[((((((((((int)blockIdx.x) % 28) / 7) * 131072) + (ax0_ax1_fused_ax2_fused_outer_outer1 * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + (C_outer_outer * 16)) + (((int)threadIdx.x) & 15)))];
            }
          }
        }
      }
    }
    __syncthreads();
    for (int C_outer_inner = 0; C_outer_inner < 2; ++C_outer_inner) {
      for (int C_inner = 0; C_inner < 4; ++C_inner) {
        for (int KW = 0; KW < 2; ++KW) {
          for (int vthread_s1 = 0; vthread_s1 < 32; ++vthread_s1) {
            output0_local[(vthread_s1)] = (output0_local[(vthread_s1)] + (mediate7_shared[(((((((vthread_s1 >> 3) * 112) + (C_outer_inner * 56)) + (C_inner * 14)) + ((((int)threadIdx.x) % 7) * 2)) + KW))] * input5_shared[(((((((vthread_s1 & 7) * 256) + ((((int)threadIdx.x) / 7) * 16)) + (C_outer_inner * 8)) + (C_inner * 2)) + KW))]));
          }
        }
      }
    }
  }
  for (int vthread_s2 = 0; vthread_s2 < 32; ++vthread_s2) {
    output0[(((((((((((int)blockIdx.x) / 28) * 100352) + ((vthread_s2 >> 3) * 25088)) + (((((int)blockIdx.x) % 28) / 7) * 6272)) + ((vthread_s2 & 7) * 784)) + ((((int)threadIdx.x) / 7) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 7)))] = output0_local[(vthread_s2)];
  }
}

// Saved Perf = 3.431690e-04 sec / run; Step Produced = 991; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.