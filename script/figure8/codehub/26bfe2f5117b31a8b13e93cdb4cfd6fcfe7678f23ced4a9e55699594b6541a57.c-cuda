// GLOBALS: input0:float32[1], input1:float32[1], input2:float32[1], input4:float32[32, 512, 399], input5:float32[512, 512, 3] -> output0:float32[32, 512, 199]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 4, 2, 4], "Toutput0:D1": [-1, 4, 64, 1], "Toutput0:D2": [-1, 1, 1, 1], "Toutput0:R0": [-1, 2, 1], "Toutput0:R1": [-1, 1, 3], "Toutput0:RA": 0, "Toutput0:S": 3, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[0] where N0 in 32, N1 in 512, N2 in 399;   mediate1[N0, N1, N2] = input1[0] where N0 in 32, N1 in 512, N2 in 399;   mediate2[N0, N1, N2] = input2[0] where N0 in 32, N1 in 512, N2 in 399;  mediate3[N0, N1, N2] = input4[N0, N1, N2] / mediate2[N0, N1, N2];mediate4[N0, N1, N2] = mediate3[N0, N1, N2].call(`erf`); mediate5[N0, N1, N2] = mediate4[N0, N1, N2] + mediate1[N0, N1, N2]; mediate6[N0, N1, N2] = input4[N0, N1, N2] * mediate5[N0, N1, N2];mediate7[N0, N1, N2] = mediate6[N0, N1, N2] * mediate0[N0, N1, N2]; output0[N, F, WO] +=! mediate7[N, C, -0 + KW + WO * 2] * input5[F, C, KW] where WO in 199; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1]} ,  "input1" : { "dtype" : "float32", "shape" : [1]} ,  "input2" : { "dtype" : "float32", "shape" : [1]} ,  "input4" : { "dtype" : "float32", "shape" : [32, 512, 399]} ,  "input5" : { "dtype" : "float32", "shape" : [512, 512, 3]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1], input1:float32[1], input2:float32[1], input4:float32[32, 512, 399], input5:float32[512, 512, 3] -> output0:float32[32, 512, 199]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(128) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ input4, float* __restrict__ input5, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 398
  // [thread_extent] threadIdx.x = 128
  float output0_local[64];
  #pragma unroll
  for (int N_c_inner_init = 0; N_c_inner_init < 4; ++N_c_inner_init) {
    #pragma unroll
    for (int vthread_s = 0; vthread_s < 16; ++vthread_s) {
      output0_local[(((vthread_s * 4) + N_c_inner_init))] = 0.000000e+00f;
    }
  }
  for (int C_outer_outer = 0; C_outer_outer < 256; ++C_outer_outer) {
    __shared__ float mediate7_shared[192];
    __syncthreads();
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_outer_outer < 2; ++ax0_ax1_fused_ax2_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 128
      if (((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) < 192) {
        mediate7_shared[(((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)))] = ((input4[(((((((((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) / 6) * 204288) + (C_outer_outer * 798)) + (((((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) % 6) / 3) * 399)) + ((((int)blockIdx.x) % 199) * 2)) + (((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) % 3)))] * (erf((input4[(((((((((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) / 6) * 204288) + (C_outer_outer * 798)) + (((((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) % 6) / 3) * 399)) + ((((int)blockIdx.x) % 199) * 2)) + (((ax0_ax1_fused_ax2_fused_outer_outer * 128) + ((int)threadIdx.x)) % 3)))] / input2[(0)])) + input1[(0)])) * input0[(0)]);
      }
    }
    __shared__ float input5_shared[1536];
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_outer_outer1 < 12; ++ax0_ax1_fused_ax2_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 128
      input5_shared[(((ax0_ax1_fused_ax2_fused_outer_outer1 * 128) + ((int)threadIdx.x)))] = input5[((((((((int)blockIdx.x) / 199) * 393216) + ((((ax0_ax1_fused_ax2_fused_outer_outer1 * 128) + ((int)threadIdx.x)) / 6) * 1536)) + (C_outer_outer * 6)) + (((ax0_ax1_fused_ax2_fused_outer_outer1 * 128) + ((int)threadIdx.x)) % 6)))];
    }
    __syncthreads();
    #pragma unroll
    for (int C_outer_inner = 0; C_outer_inner < 2; ++C_outer_inner) {
      #pragma unroll
      for (int N_c_inner = 0; N_c_inner < 4; ++N_c_inner) {
        #pragma unroll
        for (int KW = 0; KW < 3; ++KW) {
          #pragma unroll
          for (int vthread_s1 = 0; vthread_s1 < 16; ++vthread_s1) {
            output0_local[(((vthread_s1 * 4) + N_c_inner))] = (output0_local[(((vthread_s1 * 4) + N_c_inner))] + (mediate7_shared[(((((((vthread_s1 >> 2) * 48) + ((((int)threadIdx.x) >> 6) * 24)) + (N_c_inner * 6)) + (C_outer_inner * 3)) + KW))] * input5_shared[((((((vthread_s1 & 3) * 384) + ((((int)threadIdx.x) & 63) * 6)) + (C_outer_inner * 3)) + KW))]));
          }
        }
      }
    }
  }
  for (int N_inner = 0; N_inner < 4; ++N_inner) {
    for (int vthread_s2 = 0; vthread_s2 < 16; ++vthread_s2) {
      output0[(((((((((vthread_s2 >> 2) * 815104) + ((((int)threadIdx.x) >> 6) * 407552)) + (N_inner * 101888)) + ((((int)blockIdx.x) / 199) * 50944)) + ((vthread_s2 & 3) * 12736)) + ((((int)threadIdx.x) & 63) * 199)) + (((int)blockIdx.x) % 199)))] = output0_local[(((vthread_s2 * 4) + N_inner))];
    }
  }
}

// Saved Perf = 1.665060e-03 sec / run; Step Produced = 937; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.