// GLOBALS: input0:float32[102, 1, 3, 3], input1:float32[102], input2:float32[32, 102, 28, 28] -> output0:float32[32, 102, 28, 28]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 14, 1, 2], "Toutput0:D3": [-1, 1, 28, 1], "Toutput0:R0": [-1, 1, 3], "Toutput0:R1": [-1, 1, 3], "Toutput0:RA": 0, "Toutput0:S": 1, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 28, N3 in 28;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].when([-1 + KH + HO * 1 >= 0, -1 + KH + HO * 1 < 28, -1 + KW + WO * 1 >= 0, -1 + KW + WO * 1 < 28], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].dtype())) * mediate0[KH, KW, C, 0] where HO in 28, WO in 28, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [102, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [102]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 102, 28, 28]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[102, 1, 3, 3], input1:float32[102], input2:float32[32, 102, 28, 28] -> output0:float32[32, 102, 28, 28]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(28) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 3264
  // [thread_extent] threadIdx.x = 28
  float output0_local[28];
  for (int HO_c_inner_init = 0; HO_c_inner_init < 2; ++HO_c_inner_init) {
    output0_local[(HO_c_inner_init)] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 2))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 4))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 6))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 8))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 10))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 12))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 14))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 16))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 18))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 20))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 22))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 24))] = 0.000000e+00f;
    output0_local[((HO_c_inner_init + 26))] = 0.000000e+00f;
  }
  __shared__ float mediate3_shared[784];
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 28; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 28
    mediate3_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + ((int)threadIdx.x)))] = max((input2[((((((int)blockIdx.x) * 784) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28)) + ((int)threadIdx.x)))] + input1[((((int)blockIdx.x) % 102))]), 0.000000e+00f);
  }
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 28
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[((((((int)blockIdx.x) % 102) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  for (int KH_inner = 0; KH_inner < 3; ++KH_inner) {
    for (int HO_c_inner = 0; HO_c_inner < 2; ++HO_c_inner) {
      for (int KW = 0; KW < 3; ++KW) {
        output0_local[(HO_c_inner)] = (output0_local[(HO_c_inner)] + (((((1 <= (KH_inner + HO_c_inner)) && (1 <= (KW + ((int)threadIdx.x)))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) - 29))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 2))] = (output0_local[((HO_c_inner + 2))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 27))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 4))] = (output0_local[((HO_c_inner + 4))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 83))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 6))] = (output0_local[((HO_c_inner + 6))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 139))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 8))] = (output0_local[((HO_c_inner + 8))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 195))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 10))] = (output0_local[((HO_c_inner + 10))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 251))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 12))] = (output0_local[((HO_c_inner + 12))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 307))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 14))] = (output0_local[((HO_c_inner + 14))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 363))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 16))] = (output0_local[((HO_c_inner + 16))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 419))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 18))] = (output0_local[((HO_c_inner + 18))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 475))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 20))] = (output0_local[((HO_c_inner + 20))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 531))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 22))] = (output0_local[((HO_c_inner + 22))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 587))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 24))] = (output0_local[((HO_c_inner + 24))] + ((((1 <= (KW + ((int)threadIdx.x))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 643))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
        output0_local[((HO_c_inner + 26))] = (output0_local[((HO_c_inner + 26))] + ((((((KH_inner + HO_c_inner) < 3) && (1 <= (KW + ((int)threadIdx.x)))) && ((KW + ((int)threadIdx.x)) < 29)) ? mediate3_shared[((((((KH_inner * 28) + (HO_c_inner * 28)) + KW) + ((int)threadIdx.x)) + 699))] : 0.000000e+00f) * mediate0_shared[(((KH_inner * 3) + KW))]));
      }
    }
  }
  for (int HO_inner = 0; HO_inner < 2; ++HO_inner) {
    output0[((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)))] = output0_local[(HO_inner)];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 56))] = output0_local[((HO_inner + 2))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 112))] = output0_local[((HO_inner + 4))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 168))] = output0_local[((HO_inner + 6))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 224))] = output0_local[((HO_inner + 8))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 280))] = output0_local[((HO_inner + 10))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 336))] = output0_local[((HO_inner + 12))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 392))] = output0_local[((HO_inner + 14))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 448))] = output0_local[((HO_inner + 16))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 504))] = output0_local[((HO_inner + 18))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 560))] = output0_local[((HO_inner + 20))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 616))] = output0_local[((HO_inner + 22))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 672))] = output0_local[((HO_inner + 24))];
    output0[(((((((int)blockIdx.x) * 784) + (HO_inner * 28)) + ((int)threadIdx.x)) + 728))] = output0_local[((HO_inner + 26))];
  }
}

// Saved Perf = 3.973110e-05 sec / run; Step Produced = 788; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.