// GLOBALS: input0:float32[231, 1, 3, 3], input1:float32[231], input2:float32[32, 231, 14, 14] -> output0:float32[32, 231, 14, 14]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 2, 2, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 1, 7, 2], "Toutput0:D3": [-1, 2, 7, 1], "Toutput0:R0": [-1, 1, 3], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 1, "Toutput0:S": 3, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].when([-1 + KH + HO * 1 >= 0, -1 + KH + HO * 1 < 14, -1 + KW + WO * 1 >= 0, -1 + KW + WO * 1 < 14], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].dtype())) * mediate0[KH, KW, C, 0] where HO in 14, WO in 14, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [231, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [231]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 231, 14, 14]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[231, 1, 3, 3], input1:float32[231], input2:float32[32, 231, 14, 14] -> output0:float32[32, 231, 14, 14]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(98) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 1848
  // [thread_extent] threadIdx.x = 98
  float output0_local[8];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(4)] = 0.000000e+00f;
  output0_local[(6)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  output0_local[(5)] = 0.000000e+00f;
  output0_local[(7)] = 0.000000e+00f;
  __shared__ float mediate3_shared[784];
  // [thread_extent] threadIdx.x = 98
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((int)blockIdx.x) / 231) * 181104) + ((((int)blockIdx.x) % 231) * 196)) + ((int)threadIdx.x)))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 98))] = max((input2[((((((((int)blockIdx.x) / 231) * 181104) + ((((int)blockIdx.x) % 231) * 196)) + ((int)threadIdx.x)) + 98))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 196))] = max((input2[((((((((int)blockIdx.x) / 231) * 181104) + ((((int)blockIdx.x) % 231) * 196)) + ((int)threadIdx.x)) + 45276))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 294))] = max((input2[(((((((((int)blockIdx.x) / 231) * 181104) + (((((int)threadIdx.x) + 294) / 196) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) / 14) + 7) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 392))] = max((input2[((((((((int)blockIdx.x) / 231) * 181104) + ((((int)blockIdx.x) % 231) * 196)) + ((int)threadIdx.x)) + 90552))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 490))] = max((input2[(((((((((int)blockIdx.x) / 231) * 181104) + (((((int)threadIdx.x) + 490) / 196) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) / 14) + 7) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 588))] = max((input2[((((((((int)blockIdx.x) / 231) * 181104) + ((((int)blockIdx.x) % 231) * 196)) + ((int)threadIdx.x)) + 135828))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 686))] = max((input2[(((((((((int)blockIdx.x) / 231) * 181104) + (((((int)threadIdx.x) + 686) / 196) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) / 14) + 7) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((int)blockIdx.x) % 231))]), 0.000000e+00f);
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 98
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[((((((int)blockIdx.x) % 231) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + ((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 15))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(2)] = (output0_local[(2)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 8))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(4)] = (output0_local[(4)] + ((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 377))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(6)] = (output0_local[(6)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 384))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 1))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 6))] * mediate0_shared[(0)]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 391))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(7)] = (output0_local[(7)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 398))] * mediate0_shared[(0)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 1))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 6))] * mediate0_shared[(3)]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 391))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 398))] * mediate0_shared[(3)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 13))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 20))] * mediate0_shared[(3)]));
  output0_local[(5)] = (output0_local[(5)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 405))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(7)] = (output0_local[(7)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 412))] * mediate0_shared[(3)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 13))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 20))] * mediate0_shared[(6)]));
  output0_local[(4)] = (output0_local[(4)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 405))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 412))] * mediate0_shared[(6)]));
  output0_local[(1)] = (output0_local[(1)] + (((((((int)threadIdx.x) % 49) < 42) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 27))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 34))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(5)] = (output0_local[(5)] + (((((((int)threadIdx.x) % 49) < 42) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 419))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(7)] = (output0_local[(7)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 426))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(0)] = (output0_local[(0)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 14))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(2)] = (output0_local[(2)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 7))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(4)] = (output0_local[(4)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 378))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(6)] = (output0_local[(6)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 385))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)))] * mediate0_shared[(1)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 7))] * mediate0_shared[(1)]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 392))] * mediate0_shared[(1)]));
  output0_local[(7)] = (output0_local[(7)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 399))] * mediate0_shared[(1)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)))] * mediate0_shared[(4)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 7))] * mediate0_shared[(4)]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 392))] * mediate0_shared[(4)]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 399))] * mediate0_shared[(4)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 14))] * mediate0_shared[(4)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 21))] * mediate0_shared[(4)]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 406))] * mediate0_shared[(4)]));
  output0_local[(7)] = (output0_local[(7)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 413))] * mediate0_shared[(4)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 14))] * mediate0_shared[(7)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 21))] * mediate0_shared[(7)]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 406))] * mediate0_shared[(7)]));
  output0_local[(6)] = (output0_local[(6)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 413))] * mediate0_shared[(7)]));
  output0_local[(1)] = (output0_local[(1)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 28))] : 0.000000e+00f) * mediate0_shared[(7)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 35))] : 0.000000e+00f) * mediate0_shared[(7)]));
  output0_local[(5)] = (output0_local[(5)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 420))] : 0.000000e+00f) * mediate0_shared[(7)]));
  output0_local[(7)] = (output0_local[(7)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 427))] : 0.000000e+00f) * mediate0_shared[(7)]));
  output0_local[(0)] = (output0_local[(0)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 13))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(2)] = (output0_local[(2)] + ((((7 <= (((int)threadIdx.x) % 49)) && ((((int)threadIdx.x) % 7) < 6)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) - 6))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(4)] = (output0_local[(4)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 379))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(6)] = (output0_local[(6)] + ((((7 <= (((int)threadIdx.x) % 49)) && ((((int)threadIdx.x) % 7) < 6)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 386))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 1))] * mediate0_shared[(2)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 8))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 393))] * mediate0_shared[(2)]));
  output0_local[(7)] = (output0_local[(7)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 400))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 1))] * mediate0_shared[(5)]));
  output0_local[(2)] = (output0_local[(2)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 8))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 393))] * mediate0_shared[(5)]));
  output0_local[(6)] = (output0_local[(6)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 400))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 15))] * mediate0_shared[(5)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 22))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(5)] = (output0_local[(5)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 407))] * mediate0_shared[(5)]));
  output0_local[(7)] = (output0_local[(7)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 414))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 15))] * mediate0_shared[(8)]));
  output0_local[(2)] = (output0_local[(2)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 22))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(4)] = (output0_local[(4)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 407))] * mediate0_shared[(8)]));
  output0_local[(6)] = (output0_local[(6)] + ((((((int)threadIdx.x) % 7) < 6) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 414))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(1)] = (output0_local[(1)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 29))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(3)] = (output0_local[(3)] + (((((((int)threadIdx.x) % 49) < 42) && ((((int)threadIdx.x) % 7) < 6)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 36))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(5)] = (output0_local[(5)] + ((((((int)threadIdx.x) % 49) < 42) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 421))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(7)] = (output0_local[(7)] + (((((((int)threadIdx.x) % 49) < 42) && ((((int)threadIdx.x) % 7) < 6)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + (((int)threadIdx.x) % 7)) + 428))] : 0.000000e+00f) * mediate0_shared[(8)]));
  for (int HO_inner = 0; HO_inner < 2; ++HO_inner) {
    output0[((((((((((int)blockIdx.x) / 231) * 181104) + ((((int)threadIdx.x) / 49) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) % 49) / 7) * 28)) + (HO_inner * 14)) + (((int)threadIdx.x) % 7)))] = output0_local[(HO_inner)];
    output0[(((((((((((int)blockIdx.x) / 231) * 181104) + ((((int)threadIdx.x) / 49) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) % 49) / 7) * 28)) + (HO_inner * 14)) + (((int)threadIdx.x) % 7)) + 7))] = output0_local[((HO_inner + 2))];
    output0[(((((((((((int)blockIdx.x) / 231) * 181104) + ((((int)threadIdx.x) / 49) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) % 49) / 7) * 28)) + (HO_inner * 14)) + (((int)threadIdx.x) % 7)) + 90552))] = output0_local[((HO_inner + 4))];
    output0[(((((((((((int)blockIdx.x) / 231) * 181104) + ((((int)threadIdx.x) / 49) * 45276)) + ((((int)blockIdx.x) % 231) * 196)) + (((((int)threadIdx.x) % 49) / 7) * 28)) + (HO_inner * 14)) + (((int)threadIdx.x) % 7)) + 90559))] = output0_local[((HO_inner + 6))];
  }
}

// Saved Perf = 2.432960e-05 sec / run; Step Produced = 727; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.