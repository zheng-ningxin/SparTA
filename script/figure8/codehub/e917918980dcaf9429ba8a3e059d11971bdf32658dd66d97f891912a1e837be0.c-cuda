// GLOBALS: input0:float32[231], input1:float32[32, 231, 14, 14], input2:float32[231, 231, 1, 1] -> output0:float32[32, 231, 14, 14]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 2, 2, 1], "Toutput0:D1": [-1, 1, 1, 21], "Toutput0:D2": [-1, 2, 1, 1], "Toutput0:D3": [-1, 1, 14, 1], "Toutput0:R0": [-1, 7, 1], "Toutput0:RA": 0, "Toutput0:S": 2, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2, N3] = input0[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate1[N0, N1, N2, N3] = input1[N0, N1, N2, N3] + mediate0[N0, N1, N2, N3]; mediate2[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate1[N0, N1, N2, N3].dtype())]); output0[N, F, HO, WO] +=! mediate2[N, C, -0 + KH + HO * 1, -0 + KW + WO * 1] * input2[F, C, KH, KW] where HO in 14, WO in 14; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [231]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 231, 14, 14]} ,  "input2" : { "dtype" : "float32", "shape" : [231, 231, 1, 1]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[231], input1:float32[32, 231, 14, 14], input2:float32[231, 231, 1, 1] -> output0:float32[32, 231, 14, 14]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(28) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 616
  // [thread_extent] threadIdx.x = 28
  float output0_local[84];
  for (int F_c_inner_init = 0; F_c_inner_init < 21; ++F_c_inner_init) {
    output0_local[(F_c_inner_init)] = 0.000000e+00f;
    output0_local[((F_c_inner_init + 21))] = 0.000000e+00f;
    output0_local[((F_c_inner_init + 42))] = 0.000000e+00f;
    output0_local[((F_c_inner_init + 63))] = 0.000000e+00f;
  }
  for (int C_outer_outer = 0; C_outer_outer < 33; ++C_outer_outer) {
    __shared__ float mediate2_shared[784];
    __syncthreads();
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 28; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 28
      mediate2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + ((int)threadIdx.x)))] = max((input1[((((((((((int)blockIdx.x) / 77) * 181104) + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer / 7) * 45276)) + (C_outer_outer * 1372)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer % 7) * 196)) + ((((int)blockIdx.x) % 7) * 28)) + ((int)threadIdx.x)))] + input0[(((C_outer_outer * 7) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer % 7)))]), 0.000000e+00f);
    }
    __shared__ float input2_shared[147];
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 28
      if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 4) + (((int)threadIdx.x) / 7)) < 21) {
        if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 28) + ((int)threadIdx.x)) < 147) {
          if ((((((((int)blockIdx.x) % 77) / 7) * 21) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 4)) + (((int)threadIdx.x) / 7)) < 231) {
            input2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 28) + ((int)threadIdx.x)))] = input2[((((((((((int)blockIdx.x) % 77) / 7) * 4851) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 924)) + ((((int)threadIdx.x) / 7) * 231)) + (C_outer_outer * 7)) + (((int)threadIdx.x) % 7)))];
          }
        }
      }
    }
    __syncthreads();
    for (int C_outer_inner = 0; C_outer_inner < 7; ++C_outer_inner) {
      for (int F_c_inner = 0; F_c_inner < 21; ++F_c_inner) {
        output0_local[(F_c_inner)] = (output0_local[(F_c_inner)] + (mediate2_shared[(((((((int)threadIdx.x) / 14) * 196) + (C_outer_inner * 28)) + (((int)threadIdx.x) % 14)))] * input2_shared[(((F_c_inner * 7) + C_outer_inner))]));
        output0_local[((F_c_inner + 21))] = (output0_local[((F_c_inner + 21))] + (mediate2_shared[((((((((int)threadIdx.x) / 14) * 196) + (C_outer_inner * 28)) + (((int)threadIdx.x) % 14)) + 14))] * input2_shared[(((F_c_inner * 7) + C_outer_inner))]));
        output0_local[((F_c_inner + 42))] = (output0_local[((F_c_inner + 42))] + (mediate2_shared[((((((((int)threadIdx.x) / 14) * 196) + (C_outer_inner * 28)) + (((int)threadIdx.x) % 14)) + 392))] * input2_shared[(((F_c_inner * 7) + C_outer_inner))]));
        output0_local[((F_c_inner + 63))] = (output0_local[((F_c_inner + 63))] + (mediate2_shared[((((((((int)threadIdx.x) / 14) * 196) + (C_outer_inner * 28)) + (((int)threadIdx.x) % 14)) + 406))] * input2_shared[(((F_c_inner * 7) + C_outer_inner))]));
      }
    }
  }
  for (int F_inner = 0; F_inner < 21; ++F_inner) {
    output0[((((((((((int)blockIdx.x) / 77) * 181104) + ((((int)threadIdx.x) / 14) * 45276)) + (((((int)blockIdx.x) % 77) / 7) * 4116)) + (F_inner * 196)) + ((((int)blockIdx.x) % 7) * 28)) + (((int)threadIdx.x) % 14)))] = output0_local[(F_inner)];
    output0[(((((((((((int)blockIdx.x) / 77) * 181104) + ((((int)threadIdx.x) / 14) * 45276)) + (((((int)blockIdx.x) % 77) / 7) * 4116)) + (F_inner * 196)) + ((((int)blockIdx.x) % 7) * 28)) + (((int)threadIdx.x) % 14)) + 14))] = output0_local[((F_inner + 21))];
    output0[(((((((((((int)blockIdx.x) / 77) * 181104) + ((((int)threadIdx.x) / 14) * 45276)) + (((((int)blockIdx.x) % 77) / 7) * 4116)) + (F_inner * 196)) + ((((int)blockIdx.x) % 7) * 28)) + (((int)threadIdx.x) % 14)) + 90552))] = output0_local[((F_inner + 42))];
    output0[(((((((((((int)blockIdx.x) / 77) * 181104) + ((((int)threadIdx.x) / 14) * 45276)) + (((((int)blockIdx.x) % 77) / 7) * 4116)) + (F_inner * 196)) + ((((int)blockIdx.x) % 7) * 28)) + (((int)threadIdx.x) % 14)) + 90566))] = output0_local[((F_inner + 63))];
  }
}

// Saved Perf = 1.102430e-04 sec / run; Step Produced = 719; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.