// GLOBALS: input0:float32[128], input1:float32[32, 49, 128], input2:float32[64, 49, 49] -> output0:float32[64, 49, 64]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 1], "Toutput0:D1": [-1, 7, 7, 1], "Toutput0:D2": [-1, 4, 8, 1], "Toutput0:R0": [-1, 7, 1], "Toutput0:RA": 0, "Toutput0:S": 3, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[N2] where N0 in 32, N1 in 49;   mediate1[N0, N1, N2] = input1[N0, N1, N2] + mediate0[N0, N1, N2];  mediate2[N0, N1, N2, N3] = mediate1[N0, N1, ((N2) * 64 + N3)] where N2 in 2, N3 in 64;   mediate3[N0, N2, N1, N3] = mediate2[N0, N1, N2, N3] ;  mediate4[N0, N1, N2] = mediate3[N0 / 2 % 32, N0 / 1 % 2, N1, N2] where N0 in 64;   mediate5[N0, N1, N2] = mediate4[N0, N1, N2] ;   mediate6[N0, N1, N2] = mediate5[N0, N1, N2] ;   mediate7[N0, N1, N2] = input2[N0, N1, N2] ;   mediate8[N0, N1, N2] = mediate7[N0, N1, N2] ;   output0[B0, N, M] +=! mediate8[B0, N, K] * mediate6[B0, K, M]; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [128]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49, 128]} ,  "input2" : { "dtype" : "float32", "shape" : [64, 49, 49]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[128], input1:float32[32, 49, 128], input2:float32[64, 49, 49] -> output0:float32[64, 49, 64]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(112) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 64
  // [thread_extent] threadIdx.x = 112
  float output0_local[28];
  #pragma unroll
  for (int vthread_s = 0; vthread_s < 28; ++vthread_s) {
    output0_local[(vthread_s)] = 0.000000e+00f;
  }
  for (int K_outer_outer = 0; K_outer_outer < 7; ++K_outer_outer) {
    __shared__ float mediate8_shared[686];
    __syncthreads();
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_outer_outer < 7; ++ax0_ax1_fused_ax2_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 112
      if (((ax0_ax1_fused_ax2_fused_outer_outer * 16) + (((int)threadIdx.x) / 7)) < 98) {
        if (((ax0_ax1_fused_ax2_fused_outer_outer * 112) + ((int)threadIdx.x)) < 686) {
          mediate8_shared[(((ax0_ax1_fused_ax2_fused_outer_outer * 112) + ((int)threadIdx.x)))] = input2[(((((((((int)blockIdx.x) >> 1) * 4802) + (ax0_ax1_fused_ax2_fused_outer_outer * 784)) + ((((int)threadIdx.x) / 7) * 49)) + (K_outer_outer * 7)) + (((int)threadIdx.x) % 7)))];
        }
      }
    }
    __shared__ float mediate6_shared[448];
    #pragma unroll
    for (int ax0_ax1_fused_ax2_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_outer_outer1 < 4; ++ax0_ax1_fused_ax2_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 112
      mediate6_shared[(((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)))] = (input1[((((((((((int)blockIdx.x) >> 1) * 6272) + (K_outer_outer * 896)) + (((((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) % 224) >> 5) * 128)) + ((((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) / 224) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) & 31)))] + input0[(((((((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) / 224) * 64) + ((((int)blockIdx.x) & 1) * 32)) + (((ax0_ax1_fused_ax2_fused_outer_outer1 * 112) + ((int)threadIdx.x)) & 31)))]);
    }
    __syncthreads();
    #pragma unroll
    for (int K_outer_inner = 0; K_outer_inner < 7; ++K_outer_inner) {
      #pragma unroll
      for (int vthread_s1 = 0; vthread_s1 < 28; ++vthread_s1) {
        output0_local[(vthread_s1)] = (output0_local[(vthread_s1)] + (mediate8_shared[((((((((int)threadIdx.x) / 56) * 343) + ((vthread_s1 >> 2) * 49)) + (((((int)threadIdx.x) % 56) >> 3) * 7)) + K_outer_inner))] * mediate6_shared[((((((((int)threadIdx.x) / 56) * 224) + (K_outer_inner * 32)) + ((vthread_s1 & 3) * 8)) + (((int)threadIdx.x) & 7)))]));
      }
    }
  }
  for (int vthread_s2 = 0; vthread_s2 < 28; ++vthread_s2) {
    output0[(((((((((((int)blockIdx.x) >> 1) * 6272) + ((((int)threadIdx.x) / 56) * 3136)) + ((vthread_s2 >> 2) * 448)) + (((((int)threadIdx.x) % 56) >> 3) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((vthread_s2 & 3) * 8)) + (((int)threadIdx.x) & 7)))] = output0_local[(vthread_s2)];
  }
}

// Saved Perf = 7.587780e-06 sec / run; Step Produced = 892; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.