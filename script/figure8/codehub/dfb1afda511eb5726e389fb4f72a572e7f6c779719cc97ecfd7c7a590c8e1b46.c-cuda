// GLOBALS: input0:float32[112, 1, 3, 3], input1:float32[112], input2:float32[32, 112, 28, 28] -> output0:float32[32, 112, 14, 14]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 1, 2, 1], "Toutput0:D3": [-1, 2, 7, 1], "Toutput0:R0": [-1, 1, 1], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 0, "Toutput0:S": 2, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 28, N3 in 28;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 28, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 28], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 14, WO in 14, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [112, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [112]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 112, 28, 28]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[112, 1, 3, 3], input1:float32[112], input2:float32[32, 112, 28, 28] -> output0:float32[32, 112, 14, 14]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(28) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 12544
  // [thread_extent] threadIdx.x = 28
  float output0_local[2];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  for (int KH_outer_outer = 0; KH_outer_outer < 3; ++KH_outer_outer) {
    __shared__ float mediate3_shared[168];
  // [thread_extent] threadIdx.x = 28
    __syncthreads();
    if (1 <= (((((int)blockIdx.x) % 7) * 4) + KH_outer_outer)) {
      mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)) - 28))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    }
    mediate3_shared[((((int)threadIdx.x) + 28))] = max((input2[((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    mediate3_shared[((((int)threadIdx.x) + 56))] = max((input2[(((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)) + 28))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    if (1 <= (((((int)blockIdx.x) % 7) * 4) + KH_outer_outer)) {
      mediate3_shared[((((int)threadIdx.x) + 84))] = max((input2[(((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)) + 87780))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    }
    mediate3_shared[((((int)threadIdx.x) + 112))] = max((input2[(((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)) + 87808))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    mediate3_shared[((((int)threadIdx.x) + 140))] = max((input2[(((((((((int)blockIdx.x) / 784) * 175616) + ((((int)blockIdx.x) % 784) * 112)) + (KH_outer_outer * 28)) + ((int)threadIdx.x)) + 87836))] + input1[(((((int)blockIdx.x) % 784) / 7))]), 0.000000e+00f);
    __shared__ float mediate0_shared[3];
  // [thread_extent] threadIdx.x = 28
    if (((int)threadIdx.x) < 3) {
      mediate0_shared[(((int)threadIdx.x))] = input0[((((((((int)blockIdx.x) % 784) / 7) * 9) + (KH_outer_outer * 3)) + ((int)threadIdx.x)))];
    }
    __syncthreads();
    output0_local[(0)] = (output0_local[(0)] + ((((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[((((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)) - 1))] : 0.000000e+00f) * mediate0_shared[(0)]));
    output0_local[(1)] = (output0_local[(1)] + (((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) ? mediate3_shared[((((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)) + 13))] : 0.000000e+00f) * mediate0_shared[(0)]));
    output0_local[(0)] = (output0_local[(0)] + (((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) ? mediate3_shared[(((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)))] : 0.000000e+00f) * mediate0_shared[(1)]));
    output0_local[(1)] = (output0_local[(1)] + (((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) ? mediate3_shared[((((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)) + 14))] : 0.000000e+00f) * mediate0_shared[(1)]));
    output0_local[(0)] = (output0_local[(0)] + (((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) ? mediate3_shared[((((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)) + 1))] : 0.000000e+00f) * mediate0_shared[(2)]));
    output0_local[(1)] = (output0_local[(1)] + (((1 <= ((((((int)blockIdx.x) % 7) * 4) + (((((int)threadIdx.x) % 14) / 7) * 2)) + KH_outer_outer)) ? mediate3_shared[((((((((int)threadIdx.x) / 14) * 84) + (((((int)threadIdx.x) % 14) / 7) * 56)) + ((((int)threadIdx.x) % 7) * 2)) + 15))] : 0.000000e+00f) * mediate0_shared[(2)]));
  }
  output0[(((((((((int)blockIdx.x) / 784) * 43904) + ((((int)threadIdx.x) / 14) * 21952)) + ((((int)blockIdx.x) % 784) * 28)) + (((((int)threadIdx.x) % 14) / 7) * 14)) + (((int)threadIdx.x) % 7)))] = output0_local[(0)];
  output0[((((((((((int)blockIdx.x) / 784) * 43904) + ((((int)threadIdx.x) / 14) * 21952)) + ((((int)blockIdx.x) % 784) * 28)) + (((((int)threadIdx.x) % 14) / 7) * 14)) + (((int)threadIdx.x) % 7)) + 7))] = output0_local[(1)];
}

// Saved Perf = 2.847870e-05 sec / run; Step Produced = 942; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.