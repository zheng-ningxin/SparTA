// GLOBALS: input0:float32[17], input1:float32[32, 17, 56, 56], input2:float32[45, 17, 1, 1] -> output0:float32[32, 45, 56, 56]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 2], "Toutput0:D1": [-1, 3, 1, 5], "Toutput0:D2": [-1, 2, 4, 1], "Toutput0:D3": [-1, 1, 8, 1], "Toutput0:R0": [-1, 1, 17], "Toutput0:RA": 0, "Toutput0:S": 1, "Toutput0:U": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2, N3] = input0[N1] where N0 in 32, N2 in 56, N3 in 56;   mediate1[N0, N1, N2, N3] = input1[N0, N1, N2, N3] + mediate0[N0, N1, N2, N3]; mediate2[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate1[N0, N1, N2, N3].dtype())]); output0[N, F, HO, WO] +=! mediate2[N, C, -0 + KH + HO * 1, -0 + KW + WO * 1] * input2[F, C, KH, KW] where HO in 56, WO in 56; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [17]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 17, 56, 56]} ,  "input2" : { "dtype" : "float32", "shape" : [45, 17, 1, 1]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[17], input1:float32[32, 17, 56, 56], input2:float32[45, 17, 1, 1] -> output0:float32[32, 45, 56, 56]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(64) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 1176
  // [thread_extent] threadIdx.x = 64
  float output0_local[60];
  for (int N_c_inner_init = 0; N_c_inner_init < 2; ++N_c_inner_init) {
    for (int F_c_inner_init = 0; F_c_inner_init < 5; ++F_c_inner_init) {
      output0_local[(((N_c_inner_init * 5) + F_c_inner_init))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 5) + F_c_inner_init) + 10))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 5) + F_c_inner_init) + 20))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 5) + F_c_inner_init) + 30))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 5) + F_c_inner_init) + 40))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 5) + F_c_inner_init) + 50))] = 0.000000e+00f;
    }
  }
  __shared__ float mediate2_shared[4352];
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 68; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 64
    mediate2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 64) + ((int)threadIdx.x)))] = max((input1[((((((((((int)blockIdx.x) / 147) * 213248) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + ((((int)threadIdx.x) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)))] + input0[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer % 17))]), 0.000000e+00f);
  }
  __shared__ float input2_shared[255];
  #pragma unroll
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1) {
  // [thread_extent] threadIdx.x = 64
    if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 64) + ((int)threadIdx.x)) < 255) {
      input2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 64) + ((int)threadIdx.x)))] = input2[((((((((int)blockIdx.x) % 147) / 49) * 255) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 64)) + ((int)threadIdx.x)))];
    }
  }
  __syncthreads();
  for (int C_inner = 0; C_inner < 17; ++C_inner) {
    for (int N_c_inner = 0; N_c_inner < 2; ++N_c_inner) {
      for (int F_c_inner = 0; F_c_inner < 5; ++F_c_inner) {
        output0_local[(((N_c_inner * 5) + F_c_inner))] = (output0_local[(((N_c_inner * 5) + F_c_inner))] + (mediate2_shared[((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)))] * input2_shared[(((F_c_inner * 17) + C_inner))]));
        output0_local[((((N_c_inner * 5) + F_c_inner) + 10))] = (output0_local[((((N_c_inner * 5) + F_c_inner) + 10))] + (mediate2_shared[(((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)) + 32))] * input2_shared[(((F_c_inner * 17) + C_inner))]));
        output0_local[((((N_c_inner * 5) + F_c_inner) + 20))] = (output0_local[((((N_c_inner * 5) + F_c_inner) + 20))] + (mediate2_shared[((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)))] * input2_shared[((((F_c_inner * 17) + C_inner) + 85))]));
        output0_local[((((N_c_inner * 5) + F_c_inner) + 30))] = (output0_local[((((N_c_inner * 5) + F_c_inner) + 30))] + (mediate2_shared[(((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)) + 32))] * input2_shared[((((F_c_inner * 17) + C_inner) + 85))]));
        output0_local[((((N_c_inner * 5) + F_c_inner) + 40))] = (output0_local[((((N_c_inner * 5) + F_c_inner) + 40))] + (mediate2_shared[((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)))] * input2_shared[((((F_c_inner * 17) + C_inner) + 170))]));
        output0_local[((((N_c_inner * 5) + F_c_inner) + 50))] = (output0_local[((((N_c_inner * 5) + F_c_inner) + 50))] + (mediate2_shared[(((((((((int)threadIdx.x) >> 5) * 2176) + (N_c_inner * 1088)) + (C_inner * 64)) + (((int)threadIdx.x) & 31)) + 32))] * input2_shared[((((F_c_inner * 17) + C_inner) + 170))]));
      }
    }
  }
  for (int N_inner = 0; N_inner < 2; ++N_inner) {
    for (int F_inner = 0; F_inner < 5; ++F_inner) {
      output0[(((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)))] = output0_local[(((N_inner * 5) + F_inner))];
      output0[((((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)) + 224))] = output0_local[((((N_inner * 5) + F_inner) + 10))];
      output0[((((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)) + 15680))] = output0_local[((((N_inner * 5) + F_inner) + 20))];
      output0[((((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)) + 15904))] = output0_local[((((N_inner * 5) + F_inner) + 30))];
      output0[((((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)) + 31360))] = output0_local[((((N_inner * 5) + F_inner) + 40))];
      output0[((((((((((((((int)blockIdx.x) / 147) * 564480) + ((((int)threadIdx.x) >> 5) * 282240)) + (N_inner * 141120)) + (((((int)blockIdx.x) % 147) / 49) * 47040)) + (F_inner * 3136)) + (((((int)blockIdx.x) % 49) / 7) * 448)) + (((((int)threadIdx.x) & 31) >> 3) * 56)) + ((((int)blockIdx.x) % 7) * 8)) + (((int)threadIdx.x) & 7)) + 31584))] = output0_local[((((N_inner * 5) + F_inner) + 50))];
    }
  }
}

// Saved Perf = 5.033690e-05 sec / run; Step Produced = 965; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.