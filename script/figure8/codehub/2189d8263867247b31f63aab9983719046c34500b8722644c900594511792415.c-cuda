// GLOBALS: input0:float32[512], input1:float32[32, 49, 512] -> output0:float32[32, 49, 512]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 1, 1, 4], "Foutput0:D1": [-1, 7, 1, 1], "Foutput0:D2": [-1, 4, 16, 1], "Foutput0:O": [2, 1, 0], "Foutput0:S": 3, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[N2] where N0 in 32, N1 in 49;   output0[N0, N1, N2] = input1[N0, N1, N2] + mediate0[N0, N1, N2]; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [512]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49, 512]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[512], input1:float32[32, 49, 512] -> output0:float32[32, 49, 512]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(16) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8
  // [thread_extent] threadIdx.x = 1
  // [thread_extent] blockIdx.y = 7
  // [thread_extent] threadIdx.y = 1
  // [thread_extent] blockIdx.z = 8
  // [thread_extent] threadIdx.z = 16
  output0[(((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)))] = (input1[(((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 16))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 16))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 32))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 32))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 48))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 48))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 512))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 512))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 528))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 528))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 544))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 544))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 560))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 560))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1024))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1024))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1040))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1040))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1056))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1056))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1072))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1072))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1536))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1536))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1552))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1552))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1568))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1568))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1584))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1584))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2048))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2048))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2064))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2064))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2080))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2080))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2096))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2096))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2560))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2560))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2576))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2576))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2592))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2592))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2608))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2608))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3072))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3072))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3088))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3088))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3104))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3104))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3120))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3120))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25088))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25088))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25104))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25104))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25120))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25120))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25136))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25136))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25600))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25600))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25616))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25616))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25632))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25632))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25648))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 25648))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26112))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26112))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26128))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26128))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26144))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26144))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26160))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26160))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26624))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26624))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26640))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26640))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26656))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26656))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26672))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 26672))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27136))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27136))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27152))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27152))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27168))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27168))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27184))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27184))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27648))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27648))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27664))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27664))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27680))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27680))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27696))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 27696))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28160))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28160))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28176))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28176))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28192))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28192))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28208))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 28208))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50176))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50176))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50192))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50192))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50208))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50208))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50224))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50224))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50688))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50688))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50704))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50704))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50720))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50720))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50736))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 50736))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51200))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51200))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51216))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51216))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51232))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51232))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51248))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51248))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51712))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51712))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51728))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51728))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51744))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51744))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51760))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 51760))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52224))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52224))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52240))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52240))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52256))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52256))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52272))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52272))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52736))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52736))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52752))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52752))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52768))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52768))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52784))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 52784))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53248))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53248))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53264))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53264))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53280))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53280))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53296))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 53296))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75264))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75264))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75280))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75280))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75296))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75296))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75312))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75312))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75776))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75776))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75792))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75792))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75808))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75808))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75824))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75824))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76288))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76288))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76304))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76304))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76320))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76320))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76336))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76336))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76800))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76800))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76816))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76816))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76832))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76832))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76848))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76848))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77312))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77312))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77328))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77328))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77344))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77344))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77360))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77360))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77824))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77824))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77840))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77840))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77856))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77856))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77872))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77872))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78336))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78336))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78352))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78352))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 16))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78368))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78368))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 32))]);
  output0[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78384))] = (input1[((((((((int)blockIdx.x) * 100352) + (((int)blockIdx.y) * 3584)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78384))] + input0[((((((int)blockIdx.z) * 64) + ((int)threadIdx.z)) + 48))]);
}

// Saved Perf = 7.922910e-06 sec / run; Step Produced = 943; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.