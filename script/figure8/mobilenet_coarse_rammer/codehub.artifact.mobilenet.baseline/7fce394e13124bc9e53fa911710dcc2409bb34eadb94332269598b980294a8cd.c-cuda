// GLOBALS: input0:float32[512, 1, 3, 3], input1:float32[512], input2:float32[32, 512, 14, 14] -> output0:float32[32, 512, 7, 7]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 1, 7, 1], "Toutput0:D3": [-1, 1, 7, 1], "Toutput0:R0": [-1, 3, 1], "Toutput0:R1": [-1, 3, 1], "Toutput0:RA": 1, "Toutput0:S": 3, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 14, N3 in 14;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].when([-1 + KH + HO * 2 >= 0, -1 + KH + HO * 2 < 14, -1 + KW + WO * 2 >= 0, -1 + KW + WO * 2 < 14], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 2, -1 + KW + WO * 2].dtype())) * mediate0[KH, KW, C, 0] where HO in 7, WO in 7, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [512, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [512]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 512, 14, 14]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[512, 1, 3, 3], input1:float32[512], input2:float32[32, 512, 14, 14] -> output0:float32[32, 512, 7, 7]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(98) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8192
  // [thread_extent] threadIdx.x = 98
  float output0_local[1];
  output0_local[(0)] = 0.000000e+00f;
  __shared__ float mediate3_shared[392];
  // [thread_extent] threadIdx.x = 98
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((((int)blockIdx.x) >> 9) * 200704) + ((((int)blockIdx.x) & 511) * 196)) + ((int)threadIdx.x)))] + input1[((((int)blockIdx.x) & 511))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 98))] = max((input2[((((((((int)blockIdx.x) >> 9) * 200704) + ((((int)blockIdx.x) & 511) * 196)) + ((int)threadIdx.x)) + 98))] + input1[((((int)blockIdx.x) & 511))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 196))] = max((input2[((((((((int)blockIdx.x) >> 9) * 200704) + ((((int)blockIdx.x) & 511) * 196)) + ((int)threadIdx.x)) + 100352))] + input1[((((int)blockIdx.x) & 511))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 294))] = max((input2[(((((((((int)blockIdx.x) >> 9) * 200704) + (((((int)threadIdx.x) + 294) / 196) * 100352)) + ((((int)blockIdx.x) & 511) * 196)) + (((((int)threadIdx.x) / 14) + 7) * 14)) + (((int)threadIdx.x) % 14)))] + input1[((((int)blockIdx.x) & 511))]), 0.000000e+00f);
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 98
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[((((((int)blockIdx.x) & 511) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + ((((7 <= (((int)threadIdx.x) % 49)) && (1 <= (((int)threadIdx.x) % 7))) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) - 15))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) - 1))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 7)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) + 13))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(0)] = (output0_local[(0)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) - 14))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)))] * mediate0_shared[(4)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) + 14))] * mediate0_shared[(7)]));
  output0_local[(0)] = (output0_local[(0)] + (((7 <= (((int)threadIdx.x) % 49)) ? mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) - 13))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) + 1))] * mediate0_shared[(5)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((((((int)threadIdx.x) / 7) * 28) + ((((int)threadIdx.x) % 7) * 2)) + 15))] * mediate0_shared[(8)]));
  output0[((((((((int)blockIdx.x) >> 9) * 50176) + ((((int)threadIdx.x) / 49) * 25088)) + ((((int)blockIdx.x) & 511) * 49)) + (((int)threadIdx.x) % 49)))] = output0_local[(0)];
}

// Saved Perf = 3.143090e-05 sec / run; Step Produced = 902; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.