// GLOBALS: input0:float32[256, 1, 3, 3], input1:float32[256], input2:float32[32, 256, 28, 28] -> output0:float32[32, 256, 28, 28]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 1, 1], "Toutput0:D1": [-1, 1, 1, 1], "Toutput0:D2": [-1, 4, 7, 1], "Toutput0:D3": [-1, 1, 28, 1], "Toutput0:R0": [-1, 1, 3], "Toutput0:R1": [-1, 1, 3], "Toutput0:RA": 1, "Toutput0:S": 3, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N2, N3, N0, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = input1[N1] where N0 in 32, N2 in 28, N3 in 28;   mediate2[N0, N1, N2, N3] = input2[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; mediate3[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate2[N0, N1, N2, N3].dtype())]); output0[N, C, HO, WO] +=! mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].when([-1 + KH + HO * 1 >= 0, -1 + KH + HO * 1 < 28, -1 + KW + WO * 1 >= 0, -1 + KW + WO * 1 < 28], const(0.0).cast(mediate3[N, C, -1 + KH + HO * 1, -1 + KW + WO * 1].dtype())) * mediate0[KH, KW, C, 0] where HO in 28, WO in 28, KH in 3, KW in 3; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [256, 1, 3, 3]} ,  "input1" : { "dtype" : "float32", "shape" : [256]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 256, 28, 28]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[256, 1, 3, 3], input1:float32[256], input2:float32[32, 256, 28, 28] -> output0:float32[32, 256, 28, 28]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(196) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8192
  // [thread_extent] threadIdx.x = 196
  float output0_local[4];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  __shared__ float mediate3_shared[784];
  // [thread_extent] threadIdx.x = 196
  mediate3_shared[(((int)threadIdx.x))] = max((input2[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)))] + input1[((((int)blockIdx.x) & 255))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 196))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 196))] + input1[((((int)blockIdx.x) & 255))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 392))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 392))] + input1[((((int)blockIdx.x) & 255))]), 0.000000e+00f);
  mediate3_shared[((((int)threadIdx.x) + 588))] = max((input2[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 588))] + input1[((((int)blockIdx.x) & 255))]), 0.000000e+00f);
  __shared__ float mediate0_shared[9];
  // [thread_extent] threadIdx.x = 196
  if (((int)threadIdx.x) < 9) {
    mediate0_shared[(((int)threadIdx.x))] = input0[((((((int)blockIdx.x) & 255) * 9) + ((int)threadIdx.x)))];
  }
  __syncthreads();
  output0_local[(0)] = (output0_local[(0)] + ((((28 <= ((int)threadIdx.x)) && (1 <= (((int)threadIdx.x) % 28))) ? mediate3_shared[((((int)threadIdx.x) - 29))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 167))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 363))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 559))] : 0.000000e+00f) * mediate0_shared[(0)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) - 1))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 195))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 391))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(3)] = (output0_local[(3)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 587))] : 0.000000e+00f) * mediate0_shared[(3)]));
  output0_local[(0)] = (output0_local[(0)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 27))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(1)] = (output0_local[(1)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 223))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(2)] = (output0_local[(2)] + (((1 <= (((int)threadIdx.x) % 28)) ? mediate3_shared[((((int)threadIdx.x) + 419))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) < 168) && (1 <= (((int)threadIdx.x) % 28))) ? mediate3_shared[((((int)threadIdx.x) + 615))] : 0.000000e+00f) * mediate0_shared[(6)]));
  output0_local[(0)] = (output0_local[(0)] + (((28 <= ((int)threadIdx.x)) ? mediate3_shared[((((int)threadIdx.x) - 28))] : 0.000000e+00f) * mediate0_shared[(1)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((int)threadIdx.x) + 168))] * mediate0_shared[(1)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[((((int)threadIdx.x) + 364))] * mediate0_shared[(1)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[((((int)threadIdx.x) + 560))] * mediate0_shared[(1)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[(((int)threadIdx.x))] * mediate0_shared[(4)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((int)threadIdx.x) + 196))] * mediate0_shared[(4)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[((((int)threadIdx.x) + 392))] * mediate0_shared[(4)]));
  output0_local[(3)] = (output0_local[(3)] + (mediate3_shared[((((int)threadIdx.x) + 588))] * mediate0_shared[(4)]));
  output0_local[(0)] = (output0_local[(0)] + (mediate3_shared[((((int)threadIdx.x) + 28))] * mediate0_shared[(7)]));
  output0_local[(1)] = (output0_local[(1)] + (mediate3_shared[((((int)threadIdx.x) + 224))] * mediate0_shared[(7)]));
  output0_local[(2)] = (output0_local[(2)] + (mediate3_shared[((((int)threadIdx.x) + 420))] * mediate0_shared[(7)]));
  output0_local[(3)] = (output0_local[(3)] + (((((int)threadIdx.x) < 168) ? mediate3_shared[((((int)threadIdx.x) + 616))] : 0.000000e+00f) * mediate0_shared[(7)]));
  output0_local[(0)] = (output0_local[(0)] + ((((28 <= ((int)threadIdx.x)) && ((((int)threadIdx.x) % 28) < 27)) ? mediate3_shared[((((int)threadIdx.x) - 27))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(1)] = (output0_local[(1)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 169))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(2)] = (output0_local[(2)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 365))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 561))] : 0.000000e+00f) * mediate0_shared[(2)]));
  output0_local[(0)] = (output0_local[(0)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 1))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(1)] = (output0_local[(1)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 197))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(2)] = (output0_local[(2)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 393))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 589))] : 0.000000e+00f) * mediate0_shared[(5)]));
  output0_local[(0)] = (output0_local[(0)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 29))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(1)] = (output0_local[(1)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 225))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(2)] = (output0_local[(2)] + ((((((int)threadIdx.x) % 28) < 27) ? mediate3_shared[((((int)threadIdx.x) + 421))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0_local[(3)] = (output0_local[(3)] + ((((((int)threadIdx.x) < 168) && ((((int)threadIdx.x) % 28) < 27)) ? mediate3_shared[((((int)threadIdx.x) + 617))] : 0.000000e+00f) * mediate0_shared[(8)]));
  output0[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)))] = output0_local[(0)];
  output0[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 196))] = output0_local[(1)];
  output0[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 392))] = output0_local[(2)];
  output0[((((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 588))] = output0_local[(3)];
}

// Saved Perf = 9.740660e-05 sec / run; Step Produced = 497; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.