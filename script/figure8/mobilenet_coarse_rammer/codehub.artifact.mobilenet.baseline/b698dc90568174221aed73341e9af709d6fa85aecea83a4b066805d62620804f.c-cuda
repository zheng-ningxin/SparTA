// GLOBALS: input0:float32[512], input1:float32[32, 512, 7, 7], input2:float32[1024, 512, 1, 1] -> output0:float32[32, 1024, 7, 7]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 4, 2], "Toutput0:D1": [-1, 4, 16, 1], "Toutput0:D2": [-1, 1, 7, 1], "Toutput0:D3": [-1, 1, 1, 7], "Toutput0:R0": [-1, 2, 4], "Toutput0:RA": 0, "Toutput0:S": 1, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2, N3] = input0[N1] where N0 in 32, N2 in 7, N3 in 7;   mediate1[N0, N1, N2, N3] = input1[N0, N1, N2, N3] + mediate0[N0, N1, N2, N3]; mediate2[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3].call(`max`, [const(0).cast(mediate1[N0, N1, N2, N3].dtype())]); output0[N, F, HO, WO] +=! mediate2[N, C, -0 + KH + HO * 1, -0 + KW + WO * 1] * input2[F, C, KH, KW] where HO in 7, WO in 7; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [512]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 512, 7, 7]} ,  "input2" : { "dtype" : "float32", "shape" : [1024, 512, 1, 1]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[512], input1:float32[32, 512, 7, 7], input2:float32[1024, 512, 1, 1] -> output0:float32[32, 1024, 7, 7]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

#endif


extern "C" __global__ __launch_bounds__(448) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 64
  // [thread_extent] threadIdx.x = 448
  float output0_local[56];
  for (int N_c_inner_init = 0; N_c_inner_init < 2; ++N_c_inner_init) {
    for (int WO_c_inner_init = 0; WO_c_inner_init < 7; ++WO_c_inner_init) {
      output0_local[(((N_c_inner_init * 7) + WO_c_inner_init))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 7) + WO_c_inner_init) + 14))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 7) + WO_c_inner_init) + 28))] = 0.000000e+00f;
      output0_local[((((N_c_inner_init * 7) + WO_c_inner_init) + 42))] = 0.000000e+00f;
    }
  }
  for (int C_outer_outer = 0; C_outer_outer < 64; ++C_outer_outer) {
    __shared__ float mediate2_shared[3136];
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
  // [thread_extent] threadIdx.x = 448
      mediate2_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 448) + ((int)threadIdx.x)))] = max((input1[(((((((((int)blockIdx.x) >> 4) * 200704) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 64) + (((int)threadIdx.x) / 7)) / 56) * 25088)) + (C_outer_outer * 392)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 64) + (((int)threadIdx.x) / 7)) % 56) * 7)) + (((int)threadIdx.x) % 7)))] + input0[(((C_outer_outer * 8) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 64) + (((int)threadIdx.x) / 7)) % 56) / 7)))]), 0.000000e+00f);
    }
    __shared__ float input2_shared[512];
  // [thread_extent] threadIdx.x = 448
    input2_shared[(((int)threadIdx.x))] = input2[((((((((int)blockIdx.x) & 15) * 32768) + ((((int)threadIdx.x) >> 3) * 512)) + (C_outer_outer * 8)) + (((int)threadIdx.x) & 7)))];
    if (((int)threadIdx.x) < 64) {
      input2_shared[((((int)threadIdx.x) + 448))] = input2[(((((((((int)blockIdx.x) & 15) * 32768) + ((((int)threadIdx.x) >> 3) * 512)) + (C_outer_outer * 8)) + (((int)threadIdx.x) & 7)) + 28672))];
    }
    __syncthreads();
    for (int C_outer_inner = 0; C_outer_inner < 2; ++C_outer_inner) {
      for (int C_inner = 0; C_inner < 4; ++C_inner) {
        for (int N_c_inner = 0; N_c_inner < 2; ++N_c_inner) {
          for (int WO_c_inner = 0; WO_c_inner < 7; ++WO_c_inner) {
            output0_local[(((N_c_inner * 7) + WO_c_inner))] = (output0_local[(((N_c_inner * 7) + WO_c_inner))] + (mediate2_shared[((((((((((int)threadIdx.x) / 112) * 784) + (N_c_inner * 392)) + (C_outer_inner * 196)) + (C_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + WO_c_inner))] * input2_shared[((((((((int)threadIdx.x) % 112) / 7) * 8) + (C_outer_inner * 4)) + C_inner))]));
            output0_local[((((N_c_inner * 7) + WO_c_inner) + 14))] = (output0_local[((((N_c_inner * 7) + WO_c_inner) + 14))] + (mediate2_shared[((((((((((int)threadIdx.x) / 112) * 784) + (N_c_inner * 392)) + (C_outer_inner * 196)) + (C_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + WO_c_inner))] * input2_shared[(((((((((int)threadIdx.x) % 112) / 7) * 8) + (C_outer_inner * 4)) + C_inner) + 128))]));
            output0_local[((((N_c_inner * 7) + WO_c_inner) + 28))] = (output0_local[((((N_c_inner * 7) + WO_c_inner) + 28))] + (mediate2_shared[((((((((((int)threadIdx.x) / 112) * 784) + (N_c_inner * 392)) + (C_outer_inner * 196)) + (C_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + WO_c_inner))] * input2_shared[(((((((((int)threadIdx.x) % 112) / 7) * 8) + (C_outer_inner * 4)) + C_inner) + 256))]));
            output0_local[((((N_c_inner * 7) + WO_c_inner) + 42))] = (output0_local[((((N_c_inner * 7) + WO_c_inner) + 42))] + (mediate2_shared[((((((((((int)threadIdx.x) / 112) * 784) + (N_c_inner * 392)) + (C_outer_inner * 196)) + (C_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + WO_c_inner))] * input2_shared[(((((((((int)threadIdx.x) % 112) / 7) * 8) + (C_outer_inner * 4)) + C_inner) + 384))]));
          }
        }
      }
    }
  }
  for (int N_inner = 0; N_inner < 2; ++N_inner) {
    for (int WO_inner = 0; WO_inner < 7; ++WO_inner) {
      output0[((((((((((int)blockIdx.x) >> 4) * 401408) + ((((int)threadIdx.x) / 112) * 100352)) + (N_inner * 50176)) + ((((int)blockIdx.x) & 15) * 3136)) + ((((int)threadIdx.x) % 112) * 7)) + WO_inner))] = output0_local[(((N_inner * 7) + WO_inner))];
      output0[(((((((((((int)blockIdx.x) >> 4) * 401408) + ((((int)threadIdx.x) / 112) * 100352)) + (N_inner * 50176)) + ((((int)blockIdx.x) & 15) * 3136)) + ((((int)threadIdx.x) % 112) * 7)) + WO_inner) + 784))] = output0_local[((((N_inner * 7) + WO_inner) + 14))];
      output0[(((((((((((int)blockIdx.x) >> 4) * 401408) + ((((int)threadIdx.x) / 112) * 100352)) + (N_inner * 50176)) + ((((int)blockIdx.x) & 15) * 3136)) + ((((int)threadIdx.x) % 112) * 7)) + WO_inner) + 1568))] = output0_local[((((N_inner * 7) + WO_inner) + 28))];
      output0[(((((((((((int)blockIdx.x) >> 4) * 401408) + ((((int)threadIdx.x) / 112) * 100352)) + (N_inner * 50176)) + ((((int)blockIdx.x) & 15) * 3136)) + ((((int)threadIdx.x) % 112) * 7)) + WO_inner) + 2352))] = output0_local[((((N_inner * 7) + WO_inner) + 42))];
    }
  }
}

// Saved Perf = 2.593140e-04 sec / run; Step Produced = 986; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.